3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-950680b5068c0831.js"],""]
7:I[4266,["185","static/chunks/app/layout-950680b5068c0831.js"],"default"]
4:["id","9%E6%9C%8816%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"]
0:["bbFeRMIduFcZud7BNs8NQ",[[["",{"children":["article",{"children":[["id","9%E6%9C%8816%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"9月16日spring笔记\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["article",{"children":[["id","9%E6%9C%8816%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/d0df4e9d9cd28850.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/c033a265c4b6e7f8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/81abeb1d965206f7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a46a6036119d7d12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/51cbc18a5b192d8f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L6",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_36bd41","children":[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aae87c042353adfd.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:I[2612,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
a:I[4306,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
b:I[231,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],""]
c:I[4254,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
e:I[3869,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
f:I[5339,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"Waline"]
10:I[8360,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
11:I[4226,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
d:T2b5f,
    <p class="time">发布时间：<time datetime="16 September, 2022">2022-09-16 17:17:31</time></p>
    <p class="words">本文字数：1,024 字       阅读完需：约 5 分钟</p>
    <h2>AOP 通知的配置</h2>
<p>示例</p>
<p>Man.java</p>
<pre><code class="language-java">package com.aop;

public class Man {
    private String name = "大壮";
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void qq(String toName){
        if(b) {
            throw new RuntimeException("聊天犯规了");
        }
        System.out.println(this.name + "在和[" + toName + "]聊QQ");
    }

    public String mm(){
        System.out.println(this.name + "在聊MM");
        return "很高兴";
    }
}
</code></pre>
<p>FBI.java</p>
<pre><code class="language-java">package com.aop;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;

import java.util.Arrays;

public class FBI {
    public void before(JoinPoint joinPoint){
        Object obj =  joinPoint.getTarget();
        System.out.println("目标对象: "+ obj.getClass().getName());
        Object[] args = joinPoint.getArgs();
        System.out.println("目标对象方法参数: "+ Arrays.toString(args));
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象的方法: "+signature.getName());
    }
    public void after(JoinPoint joinPoint, Object val){
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象方法"+signature.getName()+"执行完毕,返回值"+ val);
    }
    public void throwsException(JoinPoint joinPoint, Throwable e){
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象方法"+signature.getName()+"异常! !, 信息: "+e.getMessage());
    }
    public void afterFinally(JoinPoint joinPoint){
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象的方法" + signature.getName() + "执行完毕");
    }
    // 无论有没有异常，都会执行

}
</code></pre>
<p>spring-aop.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    &#x3C;bean id="man" class="com.aop.Man">&#x3C;/bean>
    &#x3C;bean id="fbi" class="com.aop.FBI">&#x3C;/bean>
    &#x3C;aop:config>
&#x3C;!-- 切面规则   执行在Man的任意方法,参数为任意-->
        &#x3C;aop:pointcut id="pointcut" expression="execution(* com.aop.Man.*(..))"/>
        &#x3C;aop:aspect ref="fbi">
&#x3C;!--            fbi这个bean的before方法 :before为前置通知-->
            &#x3C;aop:before method="before" pointcut-ref="pointcut">&#x3C;/aop:before>
            &#x3C;aop:after-returning method="after" pointcut-ref="pointcut" returning="val">&#x3C;/aop:after-returning>
            &#x3C;!-- 注意：此处的val必须与fbi里面的Object val 参数形参名相同 -->
            &#x3C;aop:after-throwing method="throwsException" pointcut-ref="pointcut" throwing="e">&#x3C;/aop:after-throwing>
            &#x3C;!-- afterFinally 不管有无异常，都会执行 -->
            &#x3C;aop:after method="afterFinally" pointcut-ref="pointcut">&#x3C;/aop:after>
        &#x3C;/aop:aspect>
    &#x3C;/aop:config>
&#x3C;/beans>
</code></pre>
<p>TestAop.java</p>
<pre><code class="language-java">package com.aop;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestAop {
    private ClassPathXmlApplicationContext ac;

    @Before
    public void init(){
        ac = new ClassPathXmlApplicationContext("spring-aop.xml");
    }
    @Test
    public void test(){
        Man man = ac.getBean(Man.class);
        man.qq("小美");
        man.mm();
    }
    @After
    public void destroy(){
        ac.close();
    }
}
</code></pre>
<p>输出结果</p>
<pre><code class="language-text">目标对象: com.aop.Man
目标对象方法参数: [小美]
目标对象的方法: qq
目标对象方法qq异常! !, 信息: 聊天犯规了
目标对象的方法qq执行完毕
java.lang.RuntimeException: 聊天犯规了
&#x3C;!-- ...以下省略若干异常信息 -->
&#x3C;!-- 如果没有异常，继续输出以下代码 -->
大壮在和[小美]聊QQ
目标对象方法qq执行完毕
目标对象: com.aop.Man
目标对象方法参数: []
目标对象的方法: mm
大壮在聊MM
目标对象方法mm执行完毕，返回值：很高兴
</code></pre>
<h3>环绕通知</h3>
<p>aop 配置: spring-aop.xml</p>
<pre><code class="language-xml">&#x3C;aop:around method="around" pointcut-ref="pointcut">&#x3C;/aop:around>
</code></pre>
<p>FBI.java</p>
<pre><code class="language-java">public Object around(ProceedingJoinPoint joinPoint){
        Object result = null;
        //前置通知
        Object obj =  joinPoint.getTarget();
        System.out.println("目标对象: "+ obj.getClass().getName());
        try {
            //执行目标对象方法
            result = joinPoint.proceed();
            //返回后通知
            System.out.println("result" + result);
        }catch (Throwable e){
            //执行异常通知
            System.out.println("catch" + e.getMessage());
        }finally {
            //执行最终通知
            System.out.println("finally");
        }
        return result;
    }
</code></pre>
<p>结果：</p>
<pre><code class="language-text">目标对象: com.aop.Man
catch聊天犯规了
finally
目标对象: com.aop.Man
大壮在聊MM
result很高兴
finally

Process finished with exit code 0
</code></pre>
<p><img src="9_16_01.PNG" alt="alt"></p>
<h3>采用注解方式配置通知</h3>
<p>spring-auto.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
&#x3C;!--    通过在的Spring的配置中引入下列元素来启用Spring对@AspectJ的支持-->
    &#x3C;aop:aspectj-autoproxy>&#x3C;/aop:aspectj-autoproxy>

    &#x3C;context:component-scan base-package="com.auto">&#x3C;/context:component-scan>
&#x3C;/beans>
</code></pre>
<p>FBI.java</p>
<pre><code class="language-java">package com.auto;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

import java.util.Arrays;
@Aspect
public class FBI {
    @Before("execution(* com.auto.Man.*(..))")
    public void before(JoinPoint joinPoint){
        Object obj =  joinPoint.getTarget();
        System.out.println("目标对象: "+ obj.getClass().getName());
        Object[] args = joinPoint.getArgs();
        System.out.println("目标对象方法参数: "+ Arrays.toString(args));
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象的方法: "+signature.getName());
    }
    public void afterReturning(JoinPoint joinPoint, Object val){
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象方法"+signature.getName()+"执行完毕, 返回值："+val);
    }
    public void throwsException(JoinPoint joinPoint, Throwable e){
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象方法"+signature.getName()+"异常! !, 信息: "+e.getMessage());
    }
    public void afterFinally(JoinPoint joinPoint){
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象的方法" + signature.getName() + "执行完毕");
    }

    //环绕通知
    public Object around(ProceedingJoinPoint joinPoint){
        Object result = null;
        //前置通知
        Object obj =  joinPoint.getTarget();
        System.out.println("目标对象: "+ obj.getClass().getName());
        try {
            //执行目标对象方法
            result = joinPoint.proceed();
            //返回后通知
            System.out.println("result" + result);
        }catch (Throwable e){
            //执行异常通知
            System.out.println("catch" + e.getMessage());
        }finally {
            //执行最终通知
            System.out.println("finally");
        }
        return result;
    }
}
</code></pre>
<p>Man.java</p>
<pre><code class="language-java">package com.auto;

import org.springframework.stereotype.Component;

import java.util.Random;

@Component
public class Man {
    private String name = "大壮";
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void qq(String toName){
        boolean b = new Random().nextBoolean();
        if(b) {
            throw new RuntimeException("聊天犯规了");
        }

        System.out.println(this.name + "在和[" + toName + "]聊QQ");
    }

    public String mm(){
        System.out.println(this.name + "在聊MM");
        return "很高兴";
    }

}
</code></pre>
<p>TestAop.java</p>
<pre><code class="language-java">package com.auto;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestAop {
    private ClassPathXmlApplicationContext ac;

    @Test
    public void test(){
        Man man = ac.getBean(Man.class);
        man.qq("小美");
    }
    @Before
    public void init(){
        ac = new ClassPathXmlApplicationContext("spring-auto.xml");
    }
    @After
    public void destroy(){
        ac.close();
    }
}

</code></pre>
<p>结果</p>
<pre><code class="language-text">目标对象: com.auto.Man
目标对象方法参数: [小美]
目标对象的方法: qq

java.lang.RuntimeException: 聊天犯规了
</code></pre>
<h2>对数据持久化的支持</h2>
<p><img src="9_16_02.PNG" alt="alt"></p>
<p>传统的执行效率最高<br>
Spring JDBC抽象框架由四部分组成：datasource、support、core、object<br>
数据源：描述数据库，数据库连接池，(池化技术)</p>
<p>常用的数据源：DBCP, C3p0, Druid, HikariCP(光)</p>

  2:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$L9",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$La",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"9月16日spring笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Lb","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Lb","1",{"href":"/articles/后端学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"后端学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"java"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"后端"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"spring"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"AOP"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"面向切面编程"}],["$","p","5",{"className":"tags_tag__HZYxk ","children":"jdbc"}]]]}],["$","$Lc",null,{"path":"9%E6%9C%8816%E6%97%A5spring%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}],["$","$Lf",null,{"path":"9%E6%9C%8816%E6%97%A5spring%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L10",null,{}]]}]]}],["$","$L11",null,{}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"9月16日spring笔记 - 流年石刻"}],["$","meta","3",{"name":"next-size-adjust"}]]
1:null
