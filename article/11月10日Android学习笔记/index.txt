1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/c6771dd8c665257b.css",{"as":"style"}]
0:["b9a8PnxJ6T87cYHNh85eN",[[["",{"children":["article",{"children":[["id","11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"11月10日Android学习笔记\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c6771dd8c665257b.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/4d166e604f6ba619.css",{"as":"style"}]
6:HL["/_next/static/css/99f6a99e5e57ec87.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-1c7fcb8e096f7f78.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-5297ab80a73cd07d.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-5297ab80a73cd07d.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-1c7fcb8e096f7f78.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_e66fe9","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"11月10日Android学习笔记\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4d166e604f6ba619.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next"}]]}],"segment":["id","11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"11月10日Android学习笔记 - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
c:I{"id":4733,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
f:I{"id":9777,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
11:I{"id":5529,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
12:I{"id":1848,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"Waline","async":false}
13:I{"id":2953,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
14:I{"id":633,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
10:T3ea6,
    <p class="time">发布时间：<time datetime="10 November, 2022">2022-11-10 17:17:36</time></p>
    <p class="words">本文字数：1,190 字       阅读完需：约 2 分钟</p>
    <html><head></head><body><h2>读取网络数据</h2>
<p>获取网络请求属于耗时操作。在Android主线程当中不允许出现耗时操作，开启异步线程，解决获取网络请求的问题。<br>
获取网络请求必须在子线程当中完成，UI控件的设置必须在主线程当中完成。</p>
<h3>线程知识点回顾</h3>
<h4>开启新线程</h4>
<ol>
<li>创建Thread子类对象，调用start方法，启动新线程</li>
<li>编写Runnable实现类，创建Runnable子类的对象，<code><span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">MyRunnable</span>).start()</code></li>
</ol>
<h4>创建新线程对象</h4>
<pre><code class="language-java">    <span class="hljs-comment">//创建新的线程对象</span>
    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
            
        }
    });
    <span class="hljs-comment">//创建线程对象的方法2</span>
    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(){
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
            <span class="hljs-built_in">super</span>.run();
        }
    };
    <span class="hljs-comment">//启动线程</span>
    thread.start();
</code></pre>
<h4>线程的生命周期</h4>
<p>线程的生命周期: 新建-----&gt;&gt;就绪-----&gt;&gt;运行&lt;==&gt;阻塞------&gt;&gt;消亡</p>
<p>当调用<code>t1.<span class="hljs-literal">start</span>()</code>方法时，让线程处于就绪状态，有cpu的执行资格，但是没有执行权力。</p>
<h3>原生读取网络数据</h3>
<h4>配置网络访问权限</h4>
<p>AndroidManifest.xml</p>
<pre><code class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.INTERNET"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">application</span>
        <span class="hljs-attr">android:usesCleartextTraffic</span>=<span class="hljs-string">"true"</span>
···
</span></code></pre>
<h4>读取流</h4>
<pre><code class="language-java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> getStringByConnection(<span class="hljs-keyword">String</span> path) {
        <span class="hljs-comment">//内存流</span>
        ByteArrayOutputStream baos = <span class="hljs-keyword">new</span> <span class="hljs-type">ByteArrayOutputStream</span>();
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">//1. 将网址转换成资源对象</span>
            URL url = <span class="hljs-keyword">new</span> <span class="hljs-type">URL</span>(path);
            <span class="hljs-comment">//2. 开始连接网络</span>
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            <span class="hljs-comment">//3. 获取网页信息输入流</span>
            InputStream <span class="hljs-keyword">is</span> = conn.getInputStream();
            <span class="hljs-comment">//4. 读取流，写入内存</span>
            int hasRead = <span class="hljs-number">0</span>;
            byte[] buf = <span class="hljs-keyword">new</span> <span class="hljs-type">byte</span>[<span class="hljs-number">1024</span>];
            <span class="hljs-keyword">while</span> ((hasRead = <span class="hljs-keyword">is</span>.read(buf))!=<span class="hljs-number">-1</span>){
                baos.write(buf, <span class="hljs-number">0</span>, hasRead);
            }
            <span class="hljs-keyword">is</span>.close();
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> baos.toString();
    }
</code></pre>
<h4>线程中开启读取方法</h4>
<pre><code class="language-java">    <span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">loadDatas</span>(<span class="hljs-params"></span>) {
        <span class="hljs-comment">//创建新的线程对象</span>
        <span class="hljs-title class_">Thread</span> t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">//编写获取网络数据的过程</span>
                <span class="hljs-title class_">String</span> msg = <span class="hljs-title function_">getStringByConnection</span>(url);
                <span class="hljs-title class_">Log</span>.<span class="hljs-title function_">i</span>(<span class="hljs-string">"lsh"</span>, <span class="hljs-string">"run: msg===="</span> + msg);
            }
        });
        t1.<span class="hljs-title function_">start</span>();

    }
</code></pre>
<h3>UI的更新(线程间通信)</h3>
<p>只有UI线程才能更新控件内容，在子线程当中更新UI会出现bug<br>
但是从子线程获取网络数据，然后通过线程间通信，可以将数据传递给主线程，然后在主线程更新UI控件</p>
<h4>步骤</h4>
<ol>
<li>
<p>创建一个线程间通信类，该类可以在子线程当中发送消息，然后在主线程中接收消息。<br>
发送消息和接收消息得是同一个handler对象</p>
<pre><code class="language-java">    <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>.Callback() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> {
            <span class="hljs-comment">//可以接收消息的方法</span>
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
    });
</code></pre>
</li>
<li>
<p>在子线程发送消息</p>
<pre><code class="language-java">     <span class="hljs-meta">@Override</span>
     <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
         <span class="hljs-comment">//表示让当前线程可以作为loop线程，此时该子线程可以创建Handler对象，发送消息</span>
         Looper.myLooper();
         Looper.loop();
         <span class="hljs-comment">//编写获取网络数据的过程</span>
         String msg = HttpUtils.getStringByConnection(url);
         <span class="hljs-comment">//将要发送的数据封装到message当中</span>
         Message message = <span class="hljs-keyword">handler</span>.obtainMessage();
         <span class="hljs-comment">//区别消息的标识号</span>
         message.what = <span class="hljs-number">1</span>;
         message.obj = msg;
         <span class="hljs-keyword">handler</span>.sendMessage(message);
         Log.i(<span class="hljs-string">"lsh"</span>, <span class="hljs-string">"run: msg===="</span> + msg);
     }
</code></pre>
</li>
<li>
<p>在主线程接收消息</p>
<pre><code class="language-java">        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">handleMessage</span>(<span class="hljs-params"><span class="hljs-meta">@NonNull</span> Message message</span>) {
            <span class="hljs-comment">//可以接收消息的方法</span>
            <span class="hljs-keyword">if</span> (message.<span class="hljs-property">what</span> == <span class="hljs-number">1</span>) {
                <span class="hljs-title class_">String</span> str = (<span class="hljs-title class_">String</span>) message.<span class="hljs-property">obj</span>;
                binding.<span class="hljs-property">mainTv</span>.<span class="hljs-title function_">setText</span>(str);
            }
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
</code></pre>
</li>
<li>
<p>回到主线程执行任务<br>
在子线程的run方法中执行<code><span class="hljs-function"><span class="hljs-title">runOnIoThread</span><span class="hljs-params">()</span></span></code>即可</p>
<pre><code class="language-java"><span class="hljs-comment">//回到主线程执行任务</span>
<span class="hljs-title function_">runOnUiThread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
        adapter.<span class="hljs-title function_">notifyDataSetChanged</span>();
    }
});
</code></pre>
<pre><code class="language-java"><span class="hljs-title class_">Handler</span> handler2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>();
<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(){
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
        <span class="hljs-title class_">String</span> json = <span class="hljs-string">"ksdfjalkjf"</span>;
        handler2.<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">//回到主线程执行</span>
            }
        });
    }
}.<span class="hljs-title function_">start</span>();
</code></pre>
</li>
</ol>
<h3>Handler，Looper，Message，MessageQueue之间的关系</h3>
<p>答：从应用的角度举例，可以把地铁当中的安检机看作是一个线程，然后安检机中的传送带就就当中Looper对象，因为有这个传送带，安检机才能无限循环进行安检，接受安检的人就相当于handler对象，在传送带上放置包裹即 Message，然后在传送带到达指定地点后，提示给放置包裹的人接受包裹。</p>
<p>从源码的角度讲，线程当中可以通过<code>Looper.prepare<span class="hljs-comment">()</span></code>方法，在线程当中定义<code><span class="hljs-attribute">looper</span></code>对象，使线程能够循环。然后通过调用<code>Looper.<span class="hljs-keyword">loop</span>()</code>的方法使他循环起来。然后Looper上有一个封装的<code><span class="hljs-attribute">MessageQueue</span></code>对象，用来处理循环消息，调用handler的<code><span class="hljs-attribute">sendMessage</span></code>方法，把message消息的target属性设置为当前handler，然后在调用<code><span class="hljs-attribute">messagequeue</span></code>当中<code><span class="hljs-attribute">enqueueMessage</span></code>方法把消息放置在消息队列上，然后调用<code><span class="hljs-keyword">handler</span></code>的<code><span class="hljs-attribute">dispatchMessage</span></code>分发这条消息，放置这条消息的handler能够获取到此消息, 通过handleMessage方法。</p>
<h2>视图绑定</h2>
<p>不用写<code><span class="hljs-attribute">findViewById</span></code></p>
<h3>流程</h3>
<ol>
<li>
<p><code>build.gradle</code>中添加<code><span class="hljs-attribute">viewBinding</span></code></p>
<pre><code class="language-java"> <span class="hljs-keyword">android</span> {
 <span class="hljs-keyword">namespace</span> <span class="hljs-symbol">'com</span>.xyl.app1110'
 compileSdk <span class="hljs-number">32</span>
 <span class="hljs-keyword">viewBinding</span> {
     enabled <span class="hljs-literal">true</span>
 }
 <span class="hljs-operator">...</span>
 }
</code></pre>
</li>
<li>
<p>每一个view上设置id</p>
</li>
<li>
<p>在Activity类中声明<code><span class="hljs-attribute">ActivityMainBinding</span></code>对象，如</p>
<pre><code class="language-java">ActivityMainBinding binding<span class="hljs-comment">;</span>
</code></pre>
</li>
<li>
<p>在<code><span class="hljs-function"><span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span></code>方法中获取绑定对象</p>
<p><code><span class="hljs-attribute">binding</span> <span class="hljs-operator">=</span> ActivityMainBinding.inflate(getLayoutInflater())<span class="hljs-comment">;</span></code><br>
或<br>
<code><span class="hljs-attribute">binding</span> <span class="hljs-operator">=</span> ItemFoodlvBingding.bind(view)</code><br>
---在adapter的用于<code><span class="hljs-function"><span class="hljs-title">getView</span><span class="hljs-params">()</span></span></code>的<code><span class="hljs-attribute">ViewHolder</span></code>中使用</p>
<pre><code class="language-java">  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState)<span class="hljs-comment">;</span>
    binding <span class="hljs-operator">=</span> ActivityMainBinding.inflate(getLayoutInflater())<span class="hljs-comment">;</span>
    View rootView <span class="hljs-operator">=</span> binding.getRoot()<span class="hljs-comment">;</span>
    setContentView(rootView)<span class="hljs-comment">;</span>
    binding.mainTv.setText(<span class="hljs-string">"今天是个好天气"</span>)<span class="hljs-comment">;</span>
}
</code></pre>
</li>
</ol>
<h2>三级缓存</h2>
<p>三级缓存：<br>
从网络上获取图片或者复杂的数据，可以先从内存当中查找，是否有这个图片，有就显示，没有就查找本地存储文件，如果本地存储有这个图片，就读入内存，然后显示，如果没有这个图片，就上网下载这个图片，下载成功，存放到本地存储，存放到内存，显示图片。<br>
如果下载失败，显示错误图片。</p>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"11月10日Android学习笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Le","1",{"href":"/articles/Android学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"Android学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"Android"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"读取网络数据"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"Thread"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"Handler"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"缓存"}]]]}],["$","$Lf",null,{"path":"11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}],["$","$L11",null,{}],["$","$L12",null,{"path":"11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L13",null,{}]]}]]}],["$","$L14",null,{}]]}]
