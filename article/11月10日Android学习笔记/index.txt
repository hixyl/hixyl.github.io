3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-950680b5068c0831.js"],""]
7:I[4266,["185","static/chunks/app/layout-950680b5068c0831.js"],"default"]
4:["id","11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"]
0:["bbFeRMIduFcZud7BNs8NQ",[[["",{"children":["article",{"children":[["id","11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"11月10日Android学习笔记\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["article",{"children":[["id","11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/d0df4e9d9cd28850.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/c033a265c4b6e7f8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/81abeb1d965206f7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a46a6036119d7d12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/51cbc18a5b192d8f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L6",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_36bd41","children":[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aae87c042353adfd.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:I[2612,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
a:I[4306,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
b:I[231,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],""]
c:I[4254,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
e:I[3869,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
f:I[5339,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"Waline"]
10:I[8360,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
11:I[4226,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
d:T210b,
    <p class="time">发布时间：<time datetime="10 November, 2022">2022-11-10 17:17:36</time></p>
    <p class="words">本文字数：1,190 字       阅读完需：约 2 分钟</p>
    <h2>读取网络数据</h2>
<p>获取网络请求属于耗时操作。在Android主线程当中不允许出现耗时操作，开启异步线程，解决获取网络请求的问题。<br>
获取网络请求必须在子线程当中完成，UI控件的设置必须在主线程当中完成。</p>
<h3>线程知识点回顾</h3>
<h4>开启新线程</h4>
<ol>
<li>创建Thread子类对象，调用start方法，启动新线程</li>
<li>编写Runnable实现类，创建Runnable子类的对象，<code>new Thread(new MyRunnable).start()</code></li>
</ol>
<h4>创建新线程对象</h4>
<pre><code class="language-java">    //创建新的线程对象
    Thread thread = new Thread(new Runnable() {
        @Override
        public void run() {
            
        }
    });
    //创建线程对象的方法2
    Thread t2 = new Thread(){
        @Override
        public void run() {
            super.run();
        }
    };
    //启动线程
    thread.start();
</code></pre>
<h4>线程的生命周期</h4>
<p>线程的生命周期: 新建----->>就绪----->>运行&#x3C;==>阻塞------>>消亡</p>
<p>当调用<code>t1.start()</code>方法时，让线程处于就绪状态，有cpu的执行资格，但是没有执行权力。</p>
<h3>原生读取网络数据</h3>
<h4>配置网络访问权限</h4>
<p>AndroidManifest.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="utf-8"?>
&#x3C;manifest xmlns:android="http://schemas.android.com/apk/res/android">
    &#x3C;uses-permission android:name="android.permission.INTERNET"/>
    &#x3C;application
        android:usesCleartextTraffic="true"
···
</code></pre>
<h4>读取流</h4>
<pre><code class="language-java">    private String getStringByConnection(String path) {
        //内存流
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            //1. 将网址转换成资源对象
            URL url = new URL(path);
            //2. 开始连接网络
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            //3. 获取网页信息输入流
            InputStream is = conn.getInputStream();
            //4. 读取流，写入内存
            int hasRead = 0;
            byte[] buf = new byte[1024];
            while ((hasRead = is.read(buf))!=-1){
                baos.write(buf, 0, hasRead);
            }
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return baos.toString();
    }
</code></pre>
<h4>线程中开启读取方法</h4>
<pre><code class="language-java">    private void loadDatas() {
        //创建新的线程对象
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                //编写获取网络数据的过程
                String msg = getStringByConnection(url);
                Log.i("lsh", "run: msg====" + msg);
            }
        });
        t1.start();

    }
</code></pre>
<h3>UI的更新(线程间通信)</h3>
<p>只有UI线程才能更新控件内容，在子线程当中更新UI会出现bug<br>
但是从子线程获取网络数据，然后通过线程间通信，可以将数据传递给主线程，然后在主线程更新UI控件</p>
<h4>步骤</h4>
<ol>
<li>
<p>创建一个线程间通信类，该类可以在子线程当中发送消息，然后在主线程中接收消息。<br>
发送消息和接收消息得是同一个handler对象</p>
<pre><code class="language-java">    Handler handler = new Handler(new Handler.Callback() {
        @Override
        public boolean handleMessage(@NonNull Message msg) {
            //可以接收消息的方法
            return false;
        }
    });
</code></pre>
</li>
<li>
<p>在子线程发送消息</p>
<pre><code class="language-java">     @Override
     public void run() {
         //表示让当前线程可以作为loop线程，此时该子线程可以创建Handler对象，发送消息
         Looper.myLooper();
         Looper.loop();
         //编写获取网络数据的过程
         String msg = HttpUtils.getStringByConnection(url);
         //将要发送的数据封装到message当中
         Message message = handler.obtainMessage();
         //区别消息的标识号
         message.what = 1;
         message.obj = msg;
         handler.sendMessage(message);
         Log.i("lsh", "run: msg====" + msg);
     }
</code></pre>
</li>
<li>
<p>在主线程接收消息</p>
<pre><code class="language-java">        @Override
        public boolean handleMessage(@NonNull Message message) {
            //可以接收消息的方法
            if (message.what == 1) {
                String str = (String) message.obj;
                binding.mainTv.setText(str);
            }
            return false;
        }
</code></pre>
</li>
<li>
<p>回到主线程执行任务<br>
在子线程的run方法中执行<code>runOnIoThread()</code>即可</p>
<pre><code class="language-java">//回到主线程执行任务
runOnUiThread(new Runnable() {
    @Override
    public void run() {
        adapter.notifyDataSetChanged();
    }
});
</code></pre>
<pre><code class="language-java">Handler handler2 = new Handler();
new Thread(){
    @Override
    public void run() {
        String json = "ksdfjalkjf";
        handler2.post(new Runnable() {
            @Override
            public void run() {
                //回到主线程执行
            }
        });
    }
}.start();
</code></pre>
</li>
</ol>
<h3>Handler，Looper，Message，MessageQueue之间的关系</h3>
<p>答：从应用的角度举例，可以把地铁当中的安检机看作是一个线程，然后安检机中的传送带就就当中Looper对象，因为有这个传送带，安检机才能无限循环进行安检，接受安检的人就相当于handler对象，在传送带上放置包裹即 Message，然后在传送带到达指定地点后，提示给放置包裹的人接受包裹。</p>
<p>从源码的角度讲，线程当中可以通过<code>Looper.prepare()</code>方法，在线程当中定义<code>looper</code>对象，使线程能够循环。然后通过调用<code>Looper.loop()</code>的方法使他循环起来。然后Looper上有一个封装的<code>MessageQueue</code>对象，用来处理循环消息，调用handler的<code>sendMessage</code>方法，把message消息的target属性设置为当前handler，然后在调用<code>messagequeue</code>当中<code>enqueueMessage</code>方法把消息放置在消息队列上，然后调用<code>handler</code>的<code>dispatchMessage</code>分发这条消息，放置这条消息的handler能够获取到此消息, 通过handleMessage方法。</p>
<h2>视图绑定</h2>
<p>不用写<code>findViewById</code></p>
<h3>流程</h3>
<ol>
<li>
<p><code>build.gradle</code>中添加<code>viewBinding</code></p>
<pre><code class="language-java"> android {
 namespace 'com.xyl.app1110'
 compileSdk 32
 viewBinding {
     enabled true
 }
 ...
 }
</code></pre>
</li>
<li>
<p>每一个view上设置id</p>
</li>
<li>
<p>在Activity类中声明<code>ActivityMainBinding</code>对象，如</p>
<pre><code class="language-java">ActivityMainBinding binding;
</code></pre>
</li>
<li>
<p>在<code>onCreate()</code>方法中获取绑定对象</p>
<p><code>binding = ActivityMainBinding.inflate(getLayoutInflater());</code><br>
或<br>
<code>binding = ItemFoodlvBingding.bind(view)</code><br>
---在adapter的用于<code>getView()</code>的<code>ViewHolder</code>中使用</p>
<pre><code class="language-java">  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    binding = ActivityMainBinding.inflate(getLayoutInflater());
    View rootView = binding.getRoot();
    setContentView(rootView);
    binding.mainTv.setText("今天是个好天气");
}
</code></pre>
</li>
</ol>
<h2>三级缓存</h2>
<p>三级缓存：<br>
从网络上获取图片或者复杂的数据，可以先从内存当中查找，是否有这个图片，有就显示，没有就查找本地存储文件，如果本地存储有这个图片，就读入内存，然后显示，如果没有这个图片，就上网下载这个图片，下载成功，存放到本地存储，存放到内存，显示图片。<br>
如果下载失败，显示错误图片。</p>

  2:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$L9",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$La",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"11月10日Android学习笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Lb","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Lb","1",{"href":"/articles/Android学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"Android学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"Android"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"读取网络数据"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"Thread"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"Handler"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"缓存"}]]]}],["$","$Lc",null,{"path":"11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}],["$","$Lf",null,{"path":"11%E6%9C%8810%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L10",null,{}]]}]]}],["$","$L11",null,{}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"11月10日Android学习笔记 - 流年石刻"}],["$","meta","3",{"name":"next-size-adjust"}]]
1:null
