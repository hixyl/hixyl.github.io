1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/cb8e7b5b12152d96.css",{"as":"style"}]
0:["YXwsRKXICpm_LuVKRVYbE",[[["",{"children":["article",{"children":[["id","10%E6%9C%888%E6%97%A5spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"10月8日spring学习笔记\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cb8e7b5b12152d96.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/db5abb62272553e3.css",{"as":"style"}]
6:HL["/_next/static/css/c5bb756983435f23.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-8aa3a6cc59f9dfc4.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-1be16d417cdc873c.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-1be16d417cdc873c.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-8aa3a6cc59f9dfc4.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_20951f","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","10%E6%9C%888%E6%97%A5spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"10月8日spring学习笔记\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/db5abb62272553e3.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/c5bb756983435f23.css","precedence":"next"}]]}],"segment":["id","10%E6%9C%888%E6%97%A5spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"10月8日spring学习笔记 - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
c:I{"id":4733,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","520:static/chunks/520-ad0c725f9c7d0b58.js","241:static/chunks/app/article/[id]/page-7f50a38b3f9881e3.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","520:static/chunks/520-ad0c725f9c7d0b58.js","241:static/chunks/app/article/[id]/page-7f50a38b3f9881e3.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","520:static/chunks/520-ad0c725f9c7d0b58.js","241:static/chunks/app/article/[id]/page-7f50a38b3f9881e3.js"],"name":"","async":false}
10:I{"id":8914,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","520:static/chunks/520-ad0c725f9c7d0b58.js","241:static/chunks/app/article/[id]/page-7f50a38b3f9881e3.js"],"name":"","async":false}
11:I{"id":2953,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","520:static/chunks/520-ad0c725f9c7d0b58.js","241:static/chunks/app/article/[id]/page-7f50a38b3f9881e3.js"],"name":"","async":false}
12:I{"id":633,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","520:static/chunks/520-ad0c725f9c7d0b58.js","241:static/chunks/app/article/[id]/page-7f50a38b3f9881e3.js"],"name":"","async":false}
f:T8a7b,
    <p class="time">发布时间：<time datetime="08 October, 2022">2022-10-08 17:02:27</time></p>
    <p class="words">本文字数：890 字       阅读完需：约 5 分钟</p>
    <html><head></head><body><h2>token 用户登录</h2>
<p><img src="10_8_01.PNG" alt="alt"></p>
<h3>存入redis</h3>
<p>Vo对象必须实现<code><span class="hljs-attribute">Serializable</span></code>序列化接口</p>
<p>application.xml</p>
<pre><code class="language-xml"><span class="hljs-comment"># Spring配置</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-comment"># redis配置  </span>
  <span class="hljs-attr">redis:</span> 
     <span class="hljs-comment"># 地址</span>
     <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
     <span class="hljs-comment"># 端口，默认为6379</span>
     <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span> 
     <span class="hljs-comment"># 连接超时时间</span>
     <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span>
     <span class="hljs-attr">lettuce:</span>
      <span class="hljs-attr">pool:</span>
        <span class="hljs-comment"># 连接池中的最小空闲连接</span>
        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>
        <span class="hljs-comment"># 连接池中的最大空闲连接</span>
        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>
        <span class="hljs-comment"># 连接池的最大数据库连接数</span>
        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span>
        <span class="hljs-comment"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span>
        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1m</span>
</code></pre>
<h3>RedisUtil工具类</h3>
<pre><code class="language-java"><span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Autowired</span>;
<span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">core</span>.<span class="hljs-operator">*</span>;
<span class="hljs-keyword">import</span> <span class="hljs-variable">org</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;

<span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">io</span>.<span class="hljs-property">Serializable</span>;
<span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;
<span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">Set</span>;
<span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">TimeUnit</span>;
<span class="hljs-operator">*</span><span class="hljs-operator">*</span>
 <span class="hljs-operator">*</span> 缓存操作类
 <span class="hljs-operator">*</span>/
@<span class="hljs-title class_">Component</span>
<span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> {

    @<span class="hljs-title class_">Autowired</span>
    <span class="hljs-variable">private</span> <span class="hljs-title class_">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span>;

    <span class="hljs-comment">/**
     * 写入缓存
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> value
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">boolean</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">Object</span> <span class="hljs-params">value</span>) {
        <span class="hljs-variable">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-title function_">try</span> {
            <span class="hljs-title class_">ValueOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Serializable</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">operations</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForValue</span>();
            <span class="hljs-variable">operations</span>.<span class="hljs-property">set</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">value</span>);
            <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
        } <span class="hljs-title function_">catch</span> (<span class="hljs-title class_">Exception</span> <span class="hljs-variable">e</span>) {
            <span class="hljs-variable">e</span>.<span class="hljs-property">printStackTrace</span>();
            <span class="hljs-variable">throw</span>  <span class="hljs-variable">e</span>;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-variable">result</span>;
    }

    <span class="hljs-comment">/**
     * 写入缓存设置时效时间
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> value
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">boolean</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">Object</span> <span class="hljs-params">value</span>, <span class="hljs-params">Long</span> <span class="hljs-params">expireTime</span>, <span class="hljs-params">TimeUnit</span> <span class="hljs-params">timeUnit</span>) {
        <span class="hljs-variable">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-title function_">try</span> {
            <span class="hljs-title class_">ValueOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Serializable</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">operations</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForValue</span>();
            <span class="hljs-variable">operations</span>.<span class="hljs-property">set</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">value</span>);
            <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">expire</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">expireTime</span>, <span class="hljs-variable">timeUnit</span>);
            <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
        } <span class="hljs-title function_">catch</span> (<span class="hljs-title class_">Exception</span> <span class="hljs-variable">e</span>) {
            <span class="hljs-variable">e</span>.<span class="hljs-property">printStackTrace</span>();
        }
        <span class="hljs-keyword">return</span> <span class="hljs-variable">result</span>;
    }

    <span class="hljs-comment">/**
     * 批量删除对应的value
     *
     * <span class="hljs-doctag">@param</span> keys
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span>... <span class="hljs-params">keys</span>) {
        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">String</span> <span class="hljs-variable">key</span> : <span class="hljs-variable">keys</span>) {
            <span class="hljs-title function_">remove</span>(<span class="hljs-variable">key</span>);
        }
    }

    <span class="hljs-comment">/**
     * 批量删除key
     *
     * <span class="hljs-doctag">@param</span> pattern
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">removePattern</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span> <span class="hljs-params">pattern</span>) {
        <span class="hljs-title class_">Set</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Serializable</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">keys</span>(<span class="hljs-variable">pattern</span>);
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">keys</span>.<span class="hljs-property">size</span>() <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>) {
            <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">delete</span>(<span class="hljs-variable">keys</span>);
        }
    }

    <span class="hljs-comment">/**
     * 删除对应的value
     *
     * <span class="hljs-doctag">@param</span> key
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span> <span class="hljs-params">key</span>) {
        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">exists</span>(<span class="hljs-variable">key</span>)) {
            <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">delete</span>(<span class="hljs-variable">key</span>);
        }
    }

    <span class="hljs-comment">/**
     * 判断缓存中是否有对应的value
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">boolean</span> <span class="hljs-title function_">exists</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span> <span class="hljs-params">key</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">hasKey</span>(<span class="hljs-variable">key</span>);
    }

    <span class="hljs-comment">/**
     * 读取缓存
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">final</span> <span class="hljs-params">String</span> <span class="hljs-params">key</span>) {
        <span class="hljs-title class_">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-title class_">ValueOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Serializable</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">operations</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForValue</span>();
        <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-variable">operations</span>.<span class="hljs-property">get</span>(<span class="hljs-variable">key</span>);
        <span class="hljs-keyword">return</span> <span class="hljs-variable">result</span>;
    }

    <span class="hljs-comment">/**
     * 哈希 添加
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> hashKey
     * <span class="hljs-doctag">@param</span> value
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">hmSet</span>(<span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">Object</span> <span class="hljs-params">hashKey</span>, <span class="hljs-params">Object</span> <span class="hljs-params">value</span>) {
        <span class="hljs-title class_">HashOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForHash</span>();
        <span class="hljs-variable">hash</span>.<span class="hljs-property">put</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">hashKey</span>, <span class="hljs-variable">value</span>);
    }

    <span class="hljs-comment">/**
     * 哈希获取数据
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> hashKey
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">hmGet</span>(<span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">Object</span> <span class="hljs-params">hashKey</span>) {
        <span class="hljs-title class_">HashOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForHash</span>();
        <span class="hljs-keyword">return</span> <span class="hljs-variable">hash</span>.<span class="hljs-property">get</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">hashKey</span>);
    }

    <span class="hljs-comment">/**
     * 列表添加
     *
     * <span class="hljs-doctag">@param</span> k
     * <span class="hljs-doctag">@param</span> v
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">lPush</span>(<span class="hljs-params">String</span> <span class="hljs-params">k</span>, <span class="hljs-params">Object</span> <span class="hljs-params">v</span>) {
        <span class="hljs-title class_">ListOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForList</span>();
        <span class="hljs-variable">list</span>.<span class="hljs-property">rightPush</span>(<span class="hljs-variable">k</span>, <span class="hljs-variable">v</span>);
    }

    <span class="hljs-comment">/**
     * 列表获取
     *
     * <span class="hljs-doctag">@param</span> k
     * <span class="hljs-doctag">@param</span> l
     * <span class="hljs-doctag">@param</span> l1
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-title class_">List</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-title function_">lRange</span>(<span class="hljs-params">String</span> <span class="hljs-params">k</span>, <span class="hljs-params">long</span> <span class="hljs-params">l</span>, <span class="hljs-params">long</span> <span class="hljs-params">l1</span>) {
        <span class="hljs-title class_">ListOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForList</span>();
        <span class="hljs-keyword">return</span> <span class="hljs-variable">list</span>.<span class="hljs-property">range</span>(<span class="hljs-variable">k</span>, <span class="hljs-variable">l</span>, <span class="hljs-variable">l1</span>);
    }

    <span class="hljs-comment">/**
     * 集合添加
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> value
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">Object</span> <span class="hljs-params">value</span>) {
        <span class="hljs-title class_">SetOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForSet</span>();
        <span class="hljs-variable">set</span>.<span class="hljs-property">add</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">value</span>);
    }

    <span class="hljs-comment">/**
     * 集合获取
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-title class_">Set</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-title function_">setMembers</span>(<span class="hljs-params">String</span> <span class="hljs-params">key</span>) {
        <span class="hljs-title class_">SetOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForSet</span>();
        <span class="hljs-keyword">return</span> <span class="hljs-variable">set</span>.<span class="hljs-property">members</span>(<span class="hljs-variable">key</span>);
    }

    <span class="hljs-comment">/**
     * 有序集合添加
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> value
     * <span class="hljs-doctag">@param</span> scoure
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">zAdd</span>(<span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">Object</span> <span class="hljs-params">value</span>, <span class="hljs-params">double</span> <span class="hljs-params">scoure</span>) {
        <span class="hljs-title class_">ZSetOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">zset</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForZSet</span>();
        <span class="hljs-variable">zset</span>.<span class="hljs-property">add</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">value</span>, <span class="hljs-variable">scoure</span>);
    }

    <span class="hljs-comment">/**
     * 有序集合获取
     *
     * <span class="hljs-doctag">@param</span> key
     * <span class="hljs-doctag">@param</span> scoure
     * <span class="hljs-doctag">@param</span> scoure1
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-variable">public</span> <span class="hljs-title class_">Set</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-title function_">rangeByScore</span>(<span class="hljs-params">String</span> <span class="hljs-params">key</span>, <span class="hljs-params">double</span> <span class="hljs-params">scoure</span>, <span class="hljs-params">double</span> <span class="hljs-params">scoure1</span>) {
        <span class="hljs-title class_">ZSetOperations</span><span class="hljs-operator">&lt;</span><span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span><span class="hljs-operator">&gt;</span> <span class="hljs-variable">zset</span> <span class="hljs-operator">=</span> <span class="hljs-variable">redisTemplate</span>.<span class="hljs-property">opsForZSet</span>();
        <span class="hljs-keyword">return</span> <span class="hljs-variable">zset</span>.<span class="hljs-property">rangeByScore</span>(<span class="hljs-variable">key</span>, <span class="hljs-variable">scoure</span>, <span class="hljs-variable">scoure1</span>);
    }
}

</code></pre>
<h3>工具类调用</h3>
<p>使用<code>redisUtil.<span class="hljs-keyword">get</span></code>或<code><span class="hljs-keyword">set</span></code>即可</p>
<pre><code class="language-java"><span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">RedisUtil</span> redisUtil;
    <span class="hljs-meta">@PostMapping</span>(<span class="hljs-string">"/login"</span>)
    <span class="hljs-keyword">public</span> <span class="hljs-title class_">AjaxResult</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@RequestBody</span> SysUser sysUser</span>){
        <span class="hljs-title class_">SysUser</span> user = sysUserService.<span class="hljs-title function_">login</span>(sysUser);
        <span class="hljs-title class_">AjaxResult</span> ajaxResult = <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>) {
            <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; objectMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
            objectMap.<span class="hljs-title function_">put</span>(<span class="hljs-string">"loginUserName"</span>,user.<span class="hljs-title function_">getUserName</span>());
            objectMap.<span class="hljs-title function_">put</span>(<span class="hljs-string">"headImgUrl"</span>,sysUserService.<span class="hljs-title function_">getHeadImgUrl</span>(user.<span class="hljs-title function_">getImgUrl</span>()));
            <span class="hljs-title class_">String</span> token =  <span class="hljs-variable constant_">UUID</span>.<span class="hljs-title function_">randomUUID</span>().<span class="hljs-title function_">toString</span>();
            objectMap.<span class="hljs-title function_">put</span>(<span class="hljs-string">"token"</span>, token);
            <span class="hljs-comment">//token存入redis</span>
            redisUtil.<span class="hljs-title function_">set</span>(token, user, 15L, <span class="hljs-title class_">TimeUnit</span>.<span class="hljs-property">MINUTES</span>);
            ajaxResult = <span class="hljs-title class_">AjaxResult</span>.<span class="hljs-title function_">success</span>(<span class="hljs-number">200</span>,<span class="hljs-string">"登录成功"</span>, objectMap);
        }<span class="hljs-keyword">else</span>{
            ajaxResult = <span class="hljs-title class_">AjaxResult</span>.<span class="hljs-title function_">fail</span>(<span class="hljs-number">200</span>,<span class="hljs-string">"账号或密码错误"</span>, <span class="hljs-literal">null</span>);
        }
         <span class="hljs-keyword">return</span> ajaxResult;
    }
</code></pre>
<h3>后端处理</h3>
<p>拦截器配置类</p>
<p>WebConfig.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.config;

<span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.Resource;

<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.<span class="hljs-keyword">annotation</span>.InterceptorRegistration;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.<span class="hljs-keyword">annotation</span>.InterceptorRegistry;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.<span class="hljs-keyword">annotation</span>.WebMvcConfigurer;

<span class="hljs-keyword">import</span> com.zr.interceptor.AuthorizationInterceptor;

<span class="hljs-comment">// @Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-title">implements</span> <span class="hljs-title">WebMvcConfigurer</span>{

    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> AuthorizationInterceptor authorizationInterceptor;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> void addInterceptors(InterceptorRegistry registry) {
        InterceptorRegistration interceptorRegistration = registry.addInterceptor(authorizationInterceptor);
        interceptorRegistration.addPathPatterns(<span class="hljs-string">"/**"</span>).excludePathPatterns(<span class="hljs-string">"/sys/user/login"</span>);
    }
    
}
</code></pre>
<p>AuthorizationInterceptor.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.interceptor;

<span class="hljs-keyword">import</span> java.io.PrintWriter;
<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;

<span class="hljs-keyword">import</span> javax.annotation.Resource;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;

<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.util.StringUtils;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.zr.utils.AjaxResult;
<span class="hljs-keyword">import</span> com.zr.utils.RedisUtil;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizationInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span>{
    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> RedisUtil redisUtil;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span>
            <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">"Authorization"</span>);
        <span class="hljs-keyword">if</span>(!StringUtils.hasLength(token)||redisUtil.get(token) == <span class="hljs-literal">null</span>){
            <span class="hljs-comment">//返回JSON</span>
            <span class="hljs-type">AjaxResult</span> <span class="hljs-variable">ajaxResult</span> <span class="hljs-operator">=</span> AjaxResult.fail(<span class="hljs-number">401</span>, <span class="hljs-string">"用户未登录"</span>, <span class="hljs-literal">null</span>);
            response.setCharacterEncoding(<span class="hljs-string">"utf-8"</span>);
            response.setContentType(<span class="hljs-string">"text/html;charset=utf-8"</span>);
            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();
            out.write(JSON.toJSONString(ajaxResult));
            out.flush();
            out.close();
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-keyword">else</span>{
            <span class="hljs-comment">//更新过期时间</span>
            redisUtil.set(token, redisUtil.get(token), <span class="hljs-number">15L</span>, TimeUnit.MINUTES);
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;

    }
    
}
</code></pre>
<h3>前端处理</h3>
<p>在 <code><span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span></code>中添加拦截器即可</p>
<pre><code class="language-javascript"><span class="hljs-comment">// The Vue build version to load with the `import` command</span>
<span class="hljs-comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span>
<span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span>
<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>
<span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">"./store"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">'element-ui/lib/theme-chalk/index.css'</span>;

<span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>
<span class="hljs-comment">//设置axios为Vue的属性$axios</span>
<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$axios</span> = axios
<span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);

<span class="hljs-comment">// 在封装axios的文件中添加拦截器</span>
<span class="hljs-comment">// 添加请求拦截器，在请求头中加token</span>
axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(
  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> {
    config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = store.<span class="hljs-property">state</span>.<span class="hljs-property">token</span>;
    <span class="hljs-keyword">return</span> config
  },
  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)
  })

<span class="hljs-comment">//添加全局响应拦截器</span>
axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(
  <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span>{
    <span class="hljs-keyword">if</span>(resp.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> == <span class="hljs-number">401</span>){
      store.<span class="hljs-property">state</span>.<span class="hljs-property">token</span> = <span class="hljs-string">''</span>;
      router.<span class="hljs-title function_">push</span>(<span class="hljs-string">'Login'</span>).<span class="hljs-title function_">then</span>();
    }
    <span class="hljs-keyword">return</span> resp;
  },
  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)
  }
)
<span class="hljs-comment">/* eslint-disable no-new */</span>
<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>({
  <span class="hljs-attr">el</span>: <span class="hljs-string">'#app'</span>,
  router,
  store,
  <span class="hljs-attr">components</span>: { <span class="hljs-title class_">App</span> },
  <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;App/&gt;'</span>
})
</code></pre>
<h2>springboot自定义配置文件</h2>
<p>注解 <code><span class="hljs-meta">@Value(<span class="hljs-string">"<span class="hljs-subst">${img.path}</span>"</span>)</span></code> 中的img.path对应配置文件的</p>
<p>application.yaml</p>
<pre><code class="language-yaml"><span class="hljs-symbol">img:</span>
<span class="hljs-symbol">  path:</span> D:\\Img\\
</code></pre>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"10月8日spring学习笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Le","1",{"href":"/articles/后端学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"后端学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"spring"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"springboot"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"token"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"Authorization"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"redis"}]]]}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}],["$","$L10",null,{}]]}],["$","$L11",null,{}]]}]]}],["$","$L12",null,{}]]}]
