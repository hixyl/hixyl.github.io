3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-950680b5068c0831.js"],""]
7:I[4266,["185","static/chunks/app/layout-950680b5068c0831.js"],"default"]
4:["id","9%E6%9C%8814%E6%97%A5Spring%E7%AC%94%E8%AE%B0","d"]
0:["bbFeRMIduFcZud7BNs8NQ",[[["",{"children":["article",{"children":[["id","9%E6%9C%8814%E6%97%A5Spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"9月14日Spring笔记\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["article",{"children":[["id","9%E6%9C%8814%E6%97%A5Spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/d0df4e9d9cd28850.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/c033a265c4b6e7f8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/81abeb1d965206f7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a46a6036119d7d12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/51cbc18a5b192d8f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L6",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_36bd41","children":[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aae87c042353adfd.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:I[2612,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
a:I[4306,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
b:I[231,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],""]
c:I[4254,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
e:I[3869,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
f:I[5339,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"Waline"]
10:I[8360,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
11:I[4226,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
d:T45d3,
    <p class="time">发布时间：<time datetime="14 September, 2022">2022-09-14 17:13:50</time></p>
    <p class="words">本文字数：2,059 字       阅读完需：约 7 分钟</p>
    <h2>BeanFactory与ApplicationContext</h2>
<p>在Spring中，那些组成应用的主体(backbone)及由Spring IoC容器所管理的对象被称之为bean。简单地讲，bean就是由Spring容器初始化、装配及被管理的对象，除此之外，bean就没有特别之处了(与应用中的其他对象没有什么区别)。而bean定义以及bean相互间的依赖关系将通过配置元数据来描述；<br>
<code>org.springframework.beans.factory.BeanFactory</code>是Spring IoC容器的实际代表者，IoC容器负责容纳此前所描述的bean，并对bean进行管理；<br>
在Spring中，BeanFactory是IoC容器的核心接口。它的职责包括：<strong>实例化、定位、配置应用程序中的对象及建立这些对象间的依赖</strong>；</p>
<p>spring.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
&#x3C;!--  Spring 创建的 bean 对象 -->
    &#x3C;bean id="person" class="com.zr.vo.Person">&#x3C;/bean>

    &#x3C;bean id="dog" class="com.zr.vo.Dog">&#x3C;/bean>

&#x3C;/beans>
</code></pre>
<p>context包的核心是ApplicationContext接口。它由BeanFactory接口派生而来，因而提供了BeanFactory所有的功能。</p>
<p>延迟加载：<br>
<code>BeanFactroy</code>采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用<code>getBean()</code>)，才对该Bean进行加载实例化，这样，我们就不能发现一些存在的spring的配置问题。而<code>ApplicationContext</code>则相反，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误</p>
<p>延迟加载：使用时采取加载<br>
立即加载：启动时就去加载</p>
<h2>Bean的作用域</h2>
<p>Spring创建bean对象，默认是单例模式<br>
单例模式：内存中创建java对象，只能创建一个</p>
<p>Spring Framework支持以下几种作用域:</p>
<p>|作用域|描述|
|--|--|
|singleton|在每个Spring IoC容器中一个bean定义对应一个单例对象实例|
|prototype|一个bean定义对应多个对象实例（每次使用该Bean构建一个新的对象）|
|request|每次HTTP请求将会构建各自的bean实例（Web环境中生效）|
|session|在一个HTTP Session中，一个bean定义对应一个实例（Web环境中生效）|</p>
<p>在xml文件中使用<code>scope</code>定义模式</p>
<p>示例: spring.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

&#x3C;!-- 默认为单例模式 -->
    &#x3C;bean id="person" class="com.zr.vo.Person">&#x3C;/bean>

&#x3C;!-- 非单例模式 scope = "prototype" -->
    &#x3C;bean id="dog" class="com.zr.vo.Dog" scope="prototype">&#x3C;/bean>

&#x3C;/beans>
</code></pre>
<p>java单例模式：在jvm中，单例模式的类的对象只有一个<br>
Spring单例模式：在同一个spring容器中，单例模式的类的对象只有一个</p>
<h3>延迟加载</h3>
<p>可以通过配置明确要求ApplicationContext也采用延迟加载策略加载：</p>
<p>|作用域|描述|
|--|--|
|default|默认值，相当于false|
|true|当第一次获取对象实例时创建Bean实例对象|
|false|容器加载时创建Bean实例对象|</p>
<pre><code class="language-xml">&#x3C;!--    spring的bean对象 lazy-init 设置延迟加载-->
    &#x3C;bean id="person" class="com.zr.vo.Person" lazy-init="true">&#x3C;/bean>
</code></pre>
<h3>bean标签的属性</h3>
<p>name和id的特点：</p>
<ol>
<li>name可以赋多个值,id只能有一个值</li>
<li>二者都不能重复</li>
<li>ApplicationContext 对象的 <code>getBean()</code>方法均能获取name或id</li>
</ol>
<p>示例：<br>
spring.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

&#x3C;!--    spring的bean对象 lazy-init 设置延迟加载-->
    &#x3C;bean id="person" class="com.zr.vo.Person" lazy-init="true">&#x3C;/bean>
&#x3C;!-- 设置多个name,只能设置一个id -->
    &#x3C;bean id="dog" name="wang,gou" class="com.zr.vo.Dog" scope="prototype">&#x3C;/bean>

&#x3C;/beans>
</code></pre>
<p>SpringTest.java</p>
<pre><code class="language-java">   public static void main(String[] args){
        ApplicationContext ac = new ClassPathXmlApplicationContext("spring.xml");
        Dog dog = (Dog)ac.getBean("dog"); //通过id获取对象
        Person person = ac.getBean(Person.class); //通过类名获取对象，不用转换类型
        Dog dog1 = (Dog)ac.getBean("wang"); //通过name获取对象
        System.out.println(dog1);

    }
</code></pre>
<h2>Bean的初始化方式</h2>
<p>方式：</p>
<ol>
<li>构造方法初始化</li>
<li>工厂方法初始化</li>
</ol>
<p>工厂模式：</p>
<p>1.普通工厂模式：工厂类的方法是普通方法</p>
<p>CarFactory.java</p>
<pre><code class="language-java">package com.zr.factory;

import com.zr.vo.Car;

public class CarFactory {
    public Car createCar(){
        return new Car();
    }
}
</code></pre>
<p>2.静态工厂模式: 工厂类的方法是静态方法</p>
<p>CarFactory.java</p>
<pre><code class="language-java">package com.zr.factory;

import com.zr.vo.Car;

public class CarFactory {
    public static Car createCar(){
        return new Car();
    }
}
</code></pre>
<h3>工厂模式初始化示例</h3>
<p>spring.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

&#x3C;!--    spring的bean对象 lazy-init 设置延迟加载-->
    &#x3C;bean id="person" class="com.zr.vo.Person" lazy-init="true">&#x3C;/bean>

    &#x3C;bean id="dog" name="wang,gou0" class="com.zr.vo.Dog" scope="prototype">&#x3C;/bean>
    &#x3C;bean id="factory" class="com.zr.factory.AnimalFactory" >&#x3C;/bean>
&#x3C;!--    普通工厂方法-->
    &#x3C;bean id="ren" factory-bean="factory" factory-method="createPerson">&#x3C;/bean>
&#x3C;!--    静态工厂方法-->
    &#x3C;bean id="gou" class="com.zr.factory.AnimalFactory" factory-method="createDog">&#x3C;/bean>
&#x3C;/beans>

</code></pre>
<p>AnimalFactory.java</p>
<pre><code class="language-java">package com.zr.factory;

import com.zr.vo.Person;

public class AnimalFactory {
    public  Person createPerson(){
        Person person = new Person();
        return person;
    }
        public static Dog createDog(){
        return new Dog();
    }
}
</code></pre>
<p>SpringTest.java</p>
<pre><code class="language-java">package com.zr;

import com.zr.vo.Dog;
import com.zr.vo.Person;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringTest {
    public static void main(String[] args){
        ApplicationContext ac = new ClassPathXmlApplicationContext("spring.xml");
        Dog dog = (Dog)ac.getBean("dog");
//        Person person = ac.getBean(Person.class);
        Person person0 = (Person) ac.getBean("person");
        System.out.println(person0);
        Dog dog1 = (Dog)ac.getBean("wang");
        System.out.println(dog1);
        Person person2 = (Person) ac.getBean("ren");
        System.out.println(person2);
        Person person3 = (Person) ac.getBean("ren");
        System.out.println(person3);
        Dog dog2 = (Dog) ac.getBean("gou");
        System.out.println("dog地址："+dog);
        System.out.println("dog2地址："+dog2);

    }
}
</code></pre>
<p>输出如下：</p>
<pre><code class="language-text">Person对象被初始化
Person对象被初始化
com.zr.vo.Person@1e127982
com.zr.vo.Dog@60c6f5b
com.zr.vo.Person@2038ae61
com.zr.vo.Person@2038ae61
dog地址：com.zr.vo.Dog@60c6f5b
dog2地址：com.zr.vo.Dog@2038ae61

</code></pre>
<p>可见，构造方法初始化和工厂方法初始化获得的类地址是不同的，但由于默认为单例模式，统一方法初始化两个对象的地址相同，上例地址均为<code>@2038ae61</code>。</p>
<p><img src="9_14_01.PNG" alt="alt"></p>
<p>使用工厂模式创建的对象，本质上是注册了一个bean属性，类名和使用构造方法初始化注册的bean属性相同。此时，如果之前采用构造方法并使用类名获取对象，因为调用工厂模式获得对象则是相当于通过类型获取对象，那么会报错。原因就是上图所说的注册了多次的相同的bean，但用同一个class获取，spring不知道获取哪个对象。而用id获取对象则不会报错。</p>
<h2>依赖注入(DI)</h2>
<p>DI：Dependency Injection (依赖注入), 即给对象的属性赋值</p>
<p>依赖：根据什么<br>
注入：赋值</p>
<p>注入方式：</p>
<ol>
<li>Setter 注入</li>
<li>构造器注入</li>
<li>工厂方法注入</li>
<li>接口注入</li>
</ol>
<h3>Setter 注入</h3>
<p>示例</p>
<p>(在本例中，Dog和Person都是普通对象，且有<code>set()</code>方法和<code>toString()</code>方法)</p>
<p>spring-ioc.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    &#x3C;bean id="person" class="com.ioc.vo.Person">
        &#x3C;property name="name" value="李雷">&#x3C;/property>
        &#x3C;property name="age" value="20">&#x3C;/property>
        &#x3C;!-- 用ref标签表示id为"dog"的Dog类型的对象 -->
        &#x3C;property name="dog" ref="dog">&#x3C;/property>

    &#x3C;/bean>
    &#x3C;bean id="dog" class="com.ioc.vo.Dog">
    &#x3C;!-- 通过子标签给对象的属性赋值 -->
        &#x3C;property name="name" value="哈士奇">&#x3C;/property>
    &#x3C;/bean>
&#x3C;/beans>
</code></pre>
<p>TestIoc.java</p>
<pre><code class="language-java">package com.ioc;

import com.ioc.vo.Dog;
import com.ioc.vo.Person;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestIoc {
    public static void main(String[] args) {
        ApplicationContext ac = new ClassPathXmlApplicationContext("spring-ioc.xml");
        Dog dog = (Dog) ac.getBean("dog");
        Person person = (Person) ac.getBean("person");
        System.out.println(dog);
        System.out.println(person);
    }
}
</code></pre>
<p>输出结果如下：</p>
<pre><code class="language-text">Dog{name='哈士奇'}
Person{name='李雷', age=20, dog=Dog{name='哈士奇'}}
</code></pre>
<p><code>setName()</code> 中的<code>Name</code>决定了依赖注入的属性名为name，而不是<code>setName()</code>方法中的属性名</p>
<h4>p命名空间注入</h4>
<p>spring-ioc.xml</p>
<pre><code class="language-xml">&#x3C;bean id="person" class="com.ioc.vo.Person" p:age="18" p:dog-ref="dog">
        &#x3C;property name="name" value="李雷">&#x3C;/property>
&#x3C;!--        &#x3C;property name="age" value="20">&#x3C;/property>-->
&#x3C;!--        &#x3C;property name="dog" ref="dog">&#x3C;/property>-->

    &#x3C;/bean>
</code></pre>
<h3>构造方法注入</h3>
<p>spring-ioc.xml</p>
<pre><code class="language-xml">    &#x3C;bean id="dog" class="com.ioc.vo.Dog">
        &#x3C;constructor-arg value="哈士奇">&#x3C;/constructor-arg>
        &#x3C;constructor-arg value="大型犬">&#x3C;/constructor-arg>
    &#x3C;/bean>
</code></pre>
<p><code>&#x3C;constructor-arg></code>标签的顺序按照构造方法的属性顺序写</p>
<h2>Bean的管理</h2>
<h3>生命周期</h3>
<p>初始化方法和销毁方法示例</p>
<p>Dog.java</p>
<pre><code class="language-java">// ......
    public void init(){
        System.out.println("Dog的bean初始化方法");
    }
    public void destroy(){
        System.out.println("Dog的bean销毁方法");
    }
//......
</code></pre>
<p>spring-ioc.xml</p>
<pre><code class="language-xml">    &#x3C;bean id="dog" class="com.ioc.vo.Dog" init-method="init" destroy-method="destroy">
        &#x3C;constructor-arg value="哈士奇">&#x3C;/constructor-arg>
        &#x3C;constructor-arg value="大型犬">&#x3C;/constructor-arg>
    &#x3C;/bean>
</code></pre>
<p>TestIoc.java</p>
<pre><code class="language-java">public class TestIoc {
    public static void main(String[] args) {
        ApplicationContext ac = new ClassPathXmlApplicationContext("spring-ioc.xml");
        Dog dog = (Dog) ac.getBean("dog");
        Person person = (Person) ac.getBean("person");
        System.out.println(dog);
        System.out.println(person);
        ((ClassPathXmlApplicationContext)ac).close();
        // close()方法是ClassPathXmlApplicationContext对象特有的方法，所以要向下转型后才能调用
    }
}
</code></pre>
<h3>BeanPostProcessor</h3>
<p>如果想在Spring容器完成bean的实例化、配置和其它的初始化后执行一些自定义逻辑，你可以插入一个或多个的BeanPostProcessor实现；</p>
<p>可以用BeanPostProcessor在bean的实例化过程中修改bean对象</p>
<p>示例：</p>
<p><code>config/MyBeanPostProcessor.java</code></p>
<pre><code class="language-java">package com.ioc.config;

import com.ioc.vo.Person;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;

public class MyBeanPostProcessor implements BeanPostProcessor {
    /**
     * 赋值后初始化方法之前执行
     * @param bean
     * @param beanName
     * @return
     * @throws BeansException
     */
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName);
    }
    /**
     * bean 被创建后执行, 初始化方法之后执行
     * @param bean
     * @param beanName
     * @return
     * @throws BeansException
     */
    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        System.out.println(bean);
        if("person".equalsIgnoreCase(beanName)){
            Person person = (Person) bean;
            person.setAge(16);
        }
        return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName);
    }
}
</code></pre>
<p>spring-ioc.xml</p>
<pre><code class="language-xml">&#x3C;!-- 省略若干行 -->
    &#x3C;bean class="com.ioc.config.MyBeanPostProcessor">&#x3C;/bean>
&#x3C;!-- 省略若干行 -->
</code></pre>
<p>效果：在bean被创建且赋值之后将 beanName为 person 的对象的age属性设置为16。</p>
<h2>属性注入方式</h2>
<p><img src="9_14_02.PNG" alt="alt"></p>
<h3>List集合的注入</h3>
<p>Person.java</p>
<pre><code class="language-java">    private List&#x3C;String> address;

    public List&#x3C;String> getAddress() {
        return address;
    }

    public void setAddress(List&#x3C;String> address) {
        this.address = address;
    }
</code></pre>
<p>spring-ioc.xml</p>
<pre><code class="language-xml">        &#x3C;property name="address">
            &#x3C;list>
                &#x3C;value>长春&#x3C;/value>
                &#x3C;value>大连&#x3C;/value>
            &#x3C;/list>
        &#x3C;/property>
</code></pre>
<p>效果：为<code>List&#x3C;String></code> 类型的集合对象注入属性值</p>
<p><img src="9_14_03.PNG" alt="alt"></p>
<p><img src="9_14_04.PNG" alt="alt"></p>
<h2>自动装配及类型</h2>
<p>Spring IoC容器可以自动装配（autowire）相互协作bean之间的关联依赖关系，可以自动让Spring通过检查BeanFactory中的内容，来指定bean的协作者（其他被依赖的属性bean）;</p>
<p><img src="9_14_05.PNG" alt="alt"></p>
<p>在上图中，Person 中的Dog 属性可以用 <code>autowire="byName"</code> 参数在属性注入的时候自动装配，注意Bean <code>Dog</code>的<code>id</code>要与<code>Person</code>的属性名<code>dog</code>以及setDog方法相同。</p>
<p><code>autowire="byType"</code>示例</p>
<p>spring-auto.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    &#x3C;bean id="person" class="com.auto.vo.Person" autowire="byType">&#x3C;/bean>
&#x3C;!--    byType要求bean类型在容器中唯一 -->
&#x3C;!--    &#x3C;bean id="dog" class="com.auto.vo.Dog">&#x3C;/bean>-->
    &#x3C;bean class="com.auto.vo.Dog">&#x3C;/bean>
&#x3C;/beans>
</code></pre>
<p><strong>注意</strong> byType要求bean类型在容器中唯一</p>

  2:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$L9",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$La",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"9月14日Spring笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Lb","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Lb","1",{"href":"/articles/后端学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"后端学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"java"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"后端"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"spring"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"IOC"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"DI"}],["$","p","5",{"className":"tags_tag__HZYxk ","children":"控制反转"}],["$","p","6",{"className":"tags_tag__HZYxk ","children":"依赖注入"}],["$","p","7",{"className":"tags_tag__HZYxk ","children":"xml"}]]]}],["$","$Lc",null,{"path":"9%E6%9C%8814%E6%97%A5Spring%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}],["$","$Lf",null,{"path":"9%E6%9C%8814%E6%97%A5Spring%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L10",null,{}]]}]]}],["$","$L11",null,{}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"9月14日Spring笔记 - 流年石刻"}],["$","meta","3",{"name":"next-size-adjust"}]]
1:null
