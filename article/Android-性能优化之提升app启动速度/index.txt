1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/4889457fae64fbaf.css",{"as":"style"}]
0:["rzM6RvxqX1p23emT7WN45",[[["",{"children":["article",{"children":[["id","Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%8F%90%E5%8D%87app%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6","d"],{"children":["__PAGE__?{\"id\":\"Android-性能优化之提升app启动速度\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4889457fae64fbaf.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/b4d4f9fffc1492fd.css",{"as":"style"}]
6:HL["/_next/static/css/99f6a99e5e57ec87.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-310f4f1110904b4e.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-6827bbf664db4492.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-6827bbf664db4492.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-310f4f1110904b4e.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_aaf875","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%8F%90%E5%8D%87app%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"Android-性能优化之提升app启动速度\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b4d4f9fffc1492fd.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next"}]]}],"segment":["id","Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%8F%90%E5%8D%87app%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
c:I{"id":4733,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
f:I{"id":9777,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
11:I{"id":5529,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
12:I{"id":1848,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"Waline","async":false}
13:I{"id":2953,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
14:I{"id":633,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
10:Ta39e,
    <p class="time">发布时间：<time datetime="20 March, 2023">2023-03-20 13:37:49</time></p>
    <p class="words">本文字数：2,864 字       阅读完需：约 6 分钟</p>
    <html><head></head><body><h2>1 启动的方式</h2>
<p>启动分为两种方式：<br>
1）冷启动：当直接从桌面上直接启动，同时后台没有该进程的缓存，这个时候系统就需要重新创建一个新的进程并且分配各种资源。<br>
2）热启动：该app后台有该进程的缓存，这时候启动的进程就属于热启动。</p>
<p>热启动不需要重新分配进程，也不会Application了，直接走的就是app的入口Activity，这样就速度快很多</p>
<p><a href="https://www.cnblogs.com/Oztaking/p/9385216.html#_labelTop">回到顶部</a></p>
<h2>2. 测试应用启动的时间</h2>
<p>使用命令行来启动app，同时进行时间测量。单位：毫秒</p>
<pre><code class="language-shell">    adb shell am start -W <span class="hljs-selector-attr">[PackageName]</span>/<span class="hljs-selector-attr">[PackageName.MainActivity]</span>
    adb shell am start -W com<span class="hljs-selector-class">.gzsll</span>.hupu/<span class="hljs-selector-class">.ui</span><span class="hljs-selector-class">.splash</span><span class="hljs-selector-class">.SplashActivity</span>
    adb shell am start -W com<span class="hljs-selector-class">.example</span>.applicationstartoptimizedemo/com<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.applicationstartoptimizedemo</span><span class="hljs-selector-class">.SplashActivity</span>
    adb shell am start -W com<span class="hljs-selector-class">.dn</span>.splashoptimize/com<span class="hljs-selector-class">.dn</span><span class="hljs-selector-class">.splashoptimize</span><span class="hljs-selector-class">.MainActivity</span>
</code></pre>
<p><img src="989346-20180729143009772-125609983.png" alt=""></p>
<ul>
<li>ThisTime: 165 指当前指定的MainActivity的启动时间</li>
<li>TotalTime: 165 整个应用的启动时间，Application+Activity的使用的时间</li>
<li>WaitTime: 175 包括系统的影响时间，分配资源内存等---比ToatlTime值大。</li>
</ul>
<p><img src="989346-20180729143939230-1453036201.png" alt=""></p>
<h2>3.应用启动的流程</h2>
<p>Application从构造方法开始---&gt;<code><span class="hljs-function"><span class="hljs-title">attachBaseContext</span><span class="hljs-params">()</span></span></code>---&gt;<code><span class="hljs-function"><span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span></code></p>
<p>Activity构造方法---&gt;<code><span class="hljs-function"><span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span></code>---&gt;设置显示界面布局，设置主题、背景等等属性---&gt;<code><span class="hljs-function"><span class="hljs-title">onStart</span><span class="hljs-params">()</span></span></code>---&gt;<code><span class="hljs-function"><span class="hljs-title">onResume</span><span class="hljs-params">()</span></span></code>---&gt;显示里面的view（测量、布局、绘制，显示到界面上）</p>
<h2>4.减少应用的启动时间的耗时</h2>
<p>1）、不要在Application的构造方法、attachBaseContext()、onCreate()里面进行初始化耗时操作。</p>
<p>2）、MainActivity，由于用户只关心最后的显示的这一帧，对我们的布局的层次要求要减少，自定义控件的话测量、布局、绘制的时间。<br>
不要在onCreate、onStart、onResume当中做耗时操作。</p>
<p>3）、对于SharedPreference的初始化。</p>
<p>因为他初始化的时候是需要将数据全部读取出来放到内存当中。</p>
<p>优化1：可以尽可能减少sp文件数量(IO需要时间)；2.像这样的初始化最好放到线程里面；3.大的数据缓存到数据库里面。</p>
<p>app启动的耗时主要是在：Application初始化 + MainActivity的界面加载绘制时间。</p>
<p>Application可以优化的时间很少。主要从<code><span class="hljs-attribute">MainAcitivity</span></code>入手。</p>
<p>【优化初步】</p>
<p>由于MainActivity的业务和布局复杂度非常高，甚至该界面必须要有一些初始化的数据才能显示。</p>
<p>那么这个时候MainActivity就可能半天都出不来，这就给用户感觉app太卡了。</p>
<p>我们要做的就是给用户赶紧利落的体验。点击app就立马弹出我们的界面。</p>
<p>于是乎想到使用SplashActivity--非常简单的一个欢迎页面上面都不干就只显示一个图片。</p>
<p><img src="989346-20180729150619050-1785017336.gif" alt=""></p>
<p><img src="989346-20180729150939680-414924328.png" alt=""></p>
<p>【优化升级】</p>
<p>但是SplashActivity启动之后，还是需要跳到MainActivity。MainActivity还是需要从头开始加载布局和数据。</p>
<p>想到SplashActivity里面可以去做一些MainActivity的数据的预加载。然后需要通过意图传到MainActivity。</p>
<p><img src="989346-20180729151729498-305069496.png" alt=""></p>
<p>【优化再升级】</p>
<p>可不可以再做一些更好的优化呢？</p>
<p>耗时的问题：Application+Activity的启动及资源加载时间；预加载的数据花的时间。</p>
<p>如果我们能让这两个时间重叠在一个时间段内并发地做这两个事情就省时间了。</p>
<p>解决：<br>
<strong>将SplashActivity和MainActivity合为一个</strong></p>
<p>一进来还是实现的MainActivity，SplashActivity可以变成一个<strong>SplashFragment</strong>，然后放一个<strong>FrameLayout作为根布局</strong>直接<strong>实现SplashFragment界面</strong>。</p>
<p>SplashFragment里面非常之简单，就是<strong>实现一个图片，启动非常快</strong></p>
<p>当SplashFragment显示完毕后再将它remove。同时在splash的2S的友好时间内进行网络数据缓存。</p>
<p>这个时候我们才看到MainActivity，就不必再去等待网络数据返回了。</p>
<p>在这其中可能会出现下面的问题：</p>
<p>问题：SplashView和ContentView加载放到一起来做了 ，这可能会影响应用的启动时间。</p>
<p>解决：可以使用<strong>ViewStub</strong>延迟加载MainActivity当中的View来达到减轻这个影响。</p>
<p>viewStub的设计就是为了防止MainActivity的启动加载资源太耗时了。延迟进行加载，不影响启动，用户友好。</p>
<p>但是viewStub加载也需要时间。等到主界面出来以后：viewStub.inflate(xxxx);</p>
<p>【问】如何设计延迟加载DelayLoad？</p>
<p>第一时间想到的就是在onCreate里面调用handler.postDelayed()方法。此方法不可行。</p>
<p>原因是这个延迟时间无法控制。</p>
<p>不同的机器启动速度不一样。</p>
<p>如果我们这样：在onCreate中执行handler.postDelayed的延时操作，会在什么时刻执行其中的handler.post的事件呢？</p>
<pre><code class="language-java"><span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onCreate</span>(<span class="hljs-params">Bundle savedInstanceState</span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onCreate</span>(savedInstanceState);
        <span class="hljs-title function_">setContentView</span>(R.<span class="hljs-property">layout</span>.<span class="hljs-property">activity_main</span>);

         mHandler.<span class="hljs-title function_">postDelayed</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
             <span class="hljs-meta">@Override</span>
             <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                 mProgressBar.<span class="hljs-title function_">setVisibility</span>(<span class="hljs-title class_">View</span>.<span class="hljs-property">GONE</span>);
                 iv.<span class="hljs-title function_">setVisibility</span>(<span class="hljs-title class_">View</span>.<span class="hljs-property">VISIBLE</span>);
             }
         }, <span class="hljs-number">2500</span>);
 }
</code></pre>
<p>【答】是在执行完第一次的performTraversale()之后才开始执行handler.postDelay插入的动作的（perfromTraversales()方法会执行两次）。此前该动作是在MessQueue中排队等待。</p>
<p>开始的时候应用程序会执行一系列的动作，示意图如下：</p>
<p><img src="989346-20180729160536190-1769099022.png" alt=""></p>
<p>此方法没法做到想要的效果。不同的手机完成的第一阶段的performTraversales是不同的，如果光第一阶段的perfomTraversales的就超过2500ms，则不会在执行延时加载的任务了。</p>
<p>需要达到的效果：应用已经启动并加载完成，界面已经显示出来了，然后再去做其他的事情。</p>
<p>问题：什么时候应用已经启动并加载完成，界面已经显示出来了？</p>
<p>onResume执行完了之后才显示完毕。不行。</p>
<p>onwindowfocuschange</p>
<p>ViewTreeObserver</p>
<h2>5 .优化初步</h2>
<p>【说明】最主要的优化的本质是：防止干扰MainActivity的启动，将耗时的操作都放到onResum之后。</p>
<p>【fragment_splash.xml】使用framLayout，显示一张图片，作为splashFrament的布局</p>
<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>
    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">"com.example.applicationstartoptimizedemo.MainActivity"</span> &gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/frame"</span>
        <span class="hljs-attr">android:background</span>=<span class="hljs-string">"@drawable/splash12"</span>  //<span class="hljs-attr">显示一张图片</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span> &gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span>
</code></pre>
<p>【SplashFragment.java】</p>
<pre><code class="language-java">    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">class</span> <span class="hljs-selector-tag">SplashFragment</span> <span class="hljs-selector-tag">extends</span> <span class="hljs-selector-tag">Fragment</span> {
        <span class="hljs-variable">@Override</span>
        <span class="hljs-variable">@Nullable</span>
        public View <span class="hljs-built_in">onCreateView</span>(LayoutInflater inflater,
            <span class="hljs-variable">@Nullable</span> ViewGroup container, <span class="hljs-variable">@Nullable</span> Bundle savedInstanceState) {
        <span class="hljs-comment">// TODO Auto-generated method stub</span>
        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">inflater</span><span class="hljs-selector-class">.inflate</span>(R.layout.fragment_splash, container, false);  <span class="hljs-comment">//转换布局</span>
        }
    }
</code></pre>
<p>【activity_main.xml】</p>
<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>
    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">"com.example.applicationstartoptimizedemo.MainActivity"</span> &gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/content"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span>
            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/progressBar1"</span>
            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span>
            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>
            <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"center"</span> /&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span>
            <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/iv"</span>
            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>
            <span class="hljs-attr">android:scaleType</span>=<span class="hljs-string">"fitStart"</span>
            <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/content"</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/frame"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span> &gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span>

</code></pre>
<p>【MainActivity.java】</p>
<pre><code class="language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FragmentActivity</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">mHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>();
    <span class="hljs-keyword">private</span> ProgressBar mProgressBar;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> {
        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mProgressBar = (ProgressBar) findViewById(R.id.progressBar1);

        <span class="hljs-keyword">final</span> <span class="hljs-type">SplashFragment</span> <span class="hljs-variable">splashFragment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SplashFragment</span>();
        <span class="hljs-keyword">final</span> <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> getSupportFragmentManager()
                .beginTransaction();
        transaction.replace(R.id.frame, splashFragment);
        transaction.commit();

<span class="hljs-comment">//        mHandler.postDelayed(new DelayRunnable(this, splashFragment,</span>
<span class="hljs-comment">//                mProgressBar), 2500);</span>
         getWindow().getDecorView().post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {  <span class="hljs-comment">//判断当窗体加载完毕的时候,立马再加载真正的布局进来</span>
                <span class="hljs-meta">@Override</span>
                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
                    mHandler.postDelayed(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayRunnable</span>(MainActivity.<span class="hljs-built_in">this</span>, splashFragment,
                            mProgressBar), <span class="hljs-number">2500</span>);  <span class="hljs-comment">//此处的2.5s此时真正的延时时间</span>
                }
            });

    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {
        <span class="hljs-keyword">private</span> WeakReference&lt;Context&gt; contextRef;
        <span class="hljs-keyword">private</span> WeakReference&lt;SplashFragment&gt; fragmentRef;
        <span class="hljs-keyword">private</span> WeakReference&lt;ProgressBar&gt; progressBarRef;

        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DelayRunnable</span><span class="hljs-params">(Context context, SplashFragment splashFragment,
                ProgressBar progressBar)</span> {
            contextRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;Context&gt;(context);
            fragmentRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;SplashFragment&gt;(splashFragment);
            progressBarRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;ProgressBar&gt;(progressBar);
        }

        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
            <span class="hljs-type">ProgressBar</span> <span class="hljs-variable">progressBar</span> <span class="hljs-operator">=</span> progressBarRef.get();
            <span class="hljs-keyword">if</span> (progressBar != <span class="hljs-literal">null</span>)
                progressBar.setVisibility(View.GONE);
            <span class="hljs-type">FragmentActivity</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (FragmentActivity) contextRef.get();
            <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) {
                <span class="hljs-type">SplashFragment</span> <span class="hljs-variable">splashFragment</span> <span class="hljs-operator">=</span> fragmentRef.get();
                <span class="hljs-keyword">if</span> (splashFragment == <span class="hljs-literal">null</span>)
                    <span class="hljs-keyword">return</span>;
                <span class="hljs-keyword">final</span> <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">transaction</span> <span class="hljs-operator">=</span> context
                        .getSupportFragmentManager().beginTransaction();
                transaction.remove(splashFragment);  <span class="hljs-comment">//移除fragment</span>
                transaction.commit();
            }
        }
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> {
        <span class="hljs-built_in">super</span>.onDestroy();
        mHandler.removeCallbacksAndMessages(<span class="hljs-literal">null</span>);
    }

}
</code></pre>
<p>【效果】</p>
<p><img src="989346-20180804094934465-193769041.gif" alt=""></p>
<p><img src="989346-20180804095139735-1721962743.png" alt=""></p>
<h2>6 使用Viewstub优化</h2>
<p>&nbsp;在用户点击直接进入的是MainAcitivity，但是MainActivity中，分为了两路<strong>同时</strong>加载，如下下面代码执行了两个getWindow().getDecorView().post；</p>
<p>一路是在加载viewStub布局，此处的viewStub布局是activity_main，看下面的源码。</p>
<p>一路是延时加载splash的动画界面，定义了专门的DelayRunnable类。</p>
<p>需要注意的是：getWindow().getDecorView().post的执行时机是在<strong>onResume()</strong>，即真正的Acitivity可见的时候才会加载ViewStub，才会加载splash。</p>
<pre><code class="language-java"><span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onCreate</span>(<span class="hljs-params">Bundle savedInstanceState</span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onCreate</span>(savedInstanceState);
        <span class="hljs-title function_">setContentView</span>(R.<span class="hljs-property">layout</span>.<span class="hljs-property">activity_main</span>);

        splashFragment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SplashFragment</span>();
        <span class="hljs-title class_">FragmentTransaction</span> transaction = <span class="hljs-title function_">getSupportFragmentManager</span>().<span class="hljs-title function_">beginTransaction</span>();
        transaction.<span class="hljs-title function_">replace</span>(R.<span class="hljs-property">id</span>.<span class="hljs-property">frame</span>, splashFragment);
        transaction.<span class="hljs-title function_">commit</span>();

        viewStub = (<span class="hljs-title class_">ViewStub</span>)<span class="hljs-title function_">findViewById</span>(R.<span class="hljs-property">id</span>.<span class="hljs-property">content_viewstub</span>);
        <span class="hljs-comment">//1.判断当窗体加载完毕的时候,立马再加载真正的布局进来</span>
        <span class="hljs-title function_">getWindow</span>().<span class="hljs-title function_">getDecorView</span>().<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">// 开启延迟加载</span>
                mHandler.<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
                    <span class="hljs-meta">@Override</span>
                    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                        <span class="hljs-comment">//将viewstub加载进来</span>
                        viewStub.<span class="hljs-title function_">inflate</span>();
                    }
                } );
            }
        });

        <span class="hljs-comment">//2.判断当窗体加载完毕的时候执行,延迟一段时间做动画。</span>
        <span class="hljs-title function_">getWindow</span>().<span class="hljs-title function_">getDecorView</span>().<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">// 开启延迟加载,也可以不用延迟可以立马执行（我这里延迟是为了实现fragment里面的动画效果的耗时）</span>
                mHandler.<span class="hljs-title function_">postDelayed</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayRunnable</span>(<span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">this</span>, splashFragment) ,<span class="hljs-number">2000</span>);
<span class="hljs-comment">//                mHandler.post(new DelayRunnable());</span>
            }
        });
        <span class="hljs-comment">//3.同时进行异步加载数据</span>
    }
</code></pre>
<p>【布局的viewStub】</p>
<p>【activity_main.xml源码】</p>
<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>
    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">"com.example.applicationstartoptimizedemo.MainActivity"</span> &gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">ViewStub</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/content_viewstub"</span>
        <span class="hljs-attr">android:layout</span>=<span class="hljs-string">"@layout/activity_main_viewstub"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>/&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/frame"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span> &gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span>
</code></pre>
<p>其中指定了ViewStub的layout参数，指向的是之前的acitivity_main的布局；</p>
<p>使用VIewStub系统会延时加载，只有在使用到的时候才会加载该布局。layout参数指定的布局源码如下：</p>
<p>【activity_main_viewstub.xml源码】此布局填充的内容就是原来的MainAcitivity要指定的布局内容，其中使用ImageView临时作为内容加载。</p>
<pre><code class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"utf-8"</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">"http://schemas.android.com/apk/res/android"</span>
    <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/content"</span>
    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span> &gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/progressBar1"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"wrap_content"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>
        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">"center"</span> /&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/iv"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:scaleType</span>=<span class="hljs-string">"fitStart"</span>
        <span class="hljs-attr">android:src</span>=<span class="hljs-string">"@drawable/content"</span> /&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span>
</code></pre>
<p>【优化说明】此处主要做了两项优化：</p>
<p>第一项优化是使用fragment优化，在fragment的布局中添加splash的启动页面。</p>
<p>第二项优化是优化MainAcitivity的加载时间，使用viewStub先不加载MainActivity的布局，在onResume 时候再加载。</p>
<p>使用了双加载机制，例如：splash的动画执行时间是2s，而MainActivity的viewStub加载时间是1s，那必然在splash加载的过程中viewStub已经加载成功了，是一个并行的过程。</p>
<p>注意：在此处同时也是可以加载MainActivity使用的到的数据，比如网络数据等等，下面源码中展示的提示。</p>
<pre><code class="language-java"><span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onCreate</span>(<span class="hljs-params">Bundle savedInstanceState</span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onCreate</span>(savedInstanceState);
        <span class="hljs-title function_">setContentView</span>(R.<span class="hljs-property">layout</span>.<span class="hljs-property">activity_main</span>);

        splashFragment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SplashFragment</span>();
        <span class="hljs-title class_">FragmentTransaction</span> transaction = <span class="hljs-title function_">getSupportFragmentManager</span>().<span class="hljs-title function_">beginTransaction</span>();
        transaction.<span class="hljs-title function_">replace</span>(R.<span class="hljs-property">id</span>.<span class="hljs-property">frame</span>, splashFragment);
        transaction.<span class="hljs-title function_">commit</span>();

        viewStub = (<span class="hljs-title class_">ViewStub</span>)<span class="hljs-title function_">findViewById</span>(R.<span class="hljs-property">id</span>.<span class="hljs-property">content_viewstub</span>);
        <span class="hljs-comment">//1.判断当窗体加载完毕的时候,立马再加载真正的布局进来</span>
        <span class="hljs-title function_">getWindow</span>().<span class="hljs-title function_">getDecorView</span>().<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">// 开启延迟加载</span>
                mHandler.<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
                    <span class="hljs-meta">@Override</span>
                    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                        <span class="hljs-comment">//将viewstub加载进来</span>
                        viewStub.<span class="hljs-title function_">inflate</span>();
                    }
                } );
            }
        });

        <span class="hljs-comment">//2.判断当窗体加载完毕的时候执行,延迟一段时间做动画。</span>
        <span class="hljs-title function_">getWindow</span>().<span class="hljs-title function_">getDecorView</span>().<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">// 开启延迟加载,也可以不用延迟可以立马执行（我这里延迟是为了实现fragment里面的动画效果的耗时）</span>
                mHandler.<span class="hljs-title function_">postDelayed</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayRunnable</span>(<span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">this</span>, splashFragment) ,<span class="hljs-number">2000</span>);
<span class="hljs-comment">//                mHandler.post(new DelayRunnable());</span>
            }
        });
        <span class="hljs-comment">//3.同时进行异步加载数据</span>
    }
</code></pre>
<p>优化之后的时间对比：此处的viewstub的布局比较简单，看到的优化时间比较短，如果布局非常复杂，看到的优化时间会更明显。</p>
<p><img src="989346-20180804095955539-647410094.png" alt=""></p>
<h2>7 整理</h2>
<p>【0】最主要的优化的本质是：防止干扰MainActivity的启动，将耗时的操作都放到onResum之后。</p>
<p>【1】可以将 两个getWindow().getDecorView().post(new Runnable()整合到一个方法中；</p>
<pre><code class="language-java"><span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onCreate</span>(<span class="hljs-params">Bundle savedInstanceState</span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onCreate</span>(savedInstanceState);
        <span class="hljs-title function_">setContentView</span>(R.<span class="hljs-property">layout</span>.<span class="hljs-property">activity_main</span>);

        splashFragment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SplashFragment</span>();
        <span class="hljs-title class_">FragmentTransaction</span> transaction = <span class="hljs-title function_">getSupportFragmentManager</span>().<span class="hljs-title function_">beginTransaction</span>();
        transaction.<span class="hljs-title function_">replace</span>(R.<span class="hljs-property">id</span>.<span class="hljs-property">frame</span>, splashFragment);
        transaction.<span class="hljs-title function_">commit</span>();

        viewStub = (<span class="hljs-title class_">ViewStub</span>)<span class="hljs-title function_">findViewById</span>(R.<span class="hljs-property">id</span>.<span class="hljs-property">content_viewstub</span>);
        <span class="hljs-comment">//1.判断当窗体加载完毕的时候,立马再加载真正的布局进来</span>
        <span class="hljs-title function_">getWindow</span>().<span class="hljs-title function_">getDecorView</span>().<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                <span class="hljs-comment">// 开启延迟加载</span>
                mHandler.<span class="hljs-title function_">post</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
                    <span class="hljs-meta">@Override</span>
                    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) {
                        <span class="hljs-comment">//将viewstub加载进来</span>
                        viewStub.<span class="hljs-title function_">inflate</span>();
                } );
            }

            <span class="hljs-comment">//2.判断当窗体加载完毕的时候执行,延迟一段时间做动画。</span>
                <span class="hljs-comment">//开启延迟加载,也可以不用延迟可以立马执行（我这里延迟是为了实现fragment里面的动画效果的耗时）</span>
                mHandler.<span class="hljs-title function_">postDelayed</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayRunnable</span>(<span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">this</span>, splashFragment) ,<span class="hljs-number">2000</span>);
                <span class="hljs-comment">//mHandler.post(new DelayRunnable());</span>

        });

        <span class="hljs-comment">//3.同时进行异步加载数据</span>
    }
</code></pre>
<p>【2】此处只是为了模拟，将fragment的延时时间设置为了2000。如果执行动画则不必再延时，执行post；</p>
<pre><code class="language-java">mHandler.post(<span class="hljs-keyword">new</span> <span class="hljs-type">DelayRunnable</span>());
</code></pre>
<p>【3】问为什么view.inflate 不放在framgent的移除之后来执行？如下代码展示</p>
<pre><code class="language-java"><span class="hljs-keyword">static</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">DelayRunnable</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Runnable</span></span></span>{
         <span class="hljs-keyword">private</span> WeakReference&lt;Context&gt; contextRef;
         <span class="hljs-keyword">private</span> WeakReference&lt;SplashFragment&gt; fragmentRef;
         
         <span class="hljs-keyword">public</span> DelayRunnable(Context context, SplashFragment f) {
             contextRef = <span class="hljs-keyword">new</span> <span class="hljs-type">WeakReference</span>&lt;Context&gt;(context);
             fragmentRef = <span class="hljs-keyword">new</span> <span class="hljs-type">WeakReference</span>&lt;SplashFragment&gt;(f);
         }
 
         <span class="hljs-meta">@Override</span>
         <span class="hljs-keyword">public</span> void run() {
             <span class="hljs-comment">// 移除fragment</span>
             <span class="hljs-keyword">if</span>(contextRef!=<span class="hljs-literal">null</span>){
                 SplashFragment splashFragment = fragmentRef.<span class="hljs-keyword">get</span>();
                 <span class="hljs-keyword">if</span>(splashFragment==<span class="hljs-literal">null</span>){
                     <span class="hljs-keyword">return</span>;
                 }
                 FragmentActivity activity = (FragmentActivity) contextRef.<span class="hljs-keyword">get</span>();
                 FragmentTransaction transaction = activity.getSupportFragmentManager().beginTransaction();
                 transaction.remove(splashFragment);
                 transaction.commit();
 
                 <span class="hljs-comment">//将viewstub加载进来</span>
             viewStub.inflate();   
             }
         }
     }
</code></pre>
<p>如果这样写就是串行，执行的顺序就是在执行完动画之后，再执行viewStub的加载，没有起到同时执行多任务，达不到节省时间的效果。</p>
<p>【4】在splash页面进行“跳过”处理。本质就是fragment与MainActivity的交互，可以使用接口，也可以使用第三方EventBus等，方法有多种。</p>
<p>【5】ViewStub只会加载一次，在使用的时候才会去加载。</p>
<p>【6】涉及到第三方的需要在application中初始化的尽量在子线程中初始化。</p>
<p>【7】如果向之前一样mainActivity没有展示在用户面前就开始执行动画，则相当于t时间浪费。</p>
<p><img src="989346-20180804113312843-120597367.png" alt=""></p>
<p>【8】白屏的问题在此处应该已经不存在了，需要验证一下。</p>
<p>&nbsp;源码下载地址：<a href="https://download.csdn.net/download/wsxingjun/10583183">https://download.csdn.net/download/wsxingjun/10583183</a></p>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"Android 性能优化之提升app启动速度"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Le","1",{"href":"/articles/Android学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"Android学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"Android"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"优化"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"性能"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"SplashActivity"}]]]}],["$","$Lf",null,{"path":"Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%8F%90%E5%8D%87app%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}],["$","$L11",null,{}],["$","$L12",null,{"path":"Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E6%8F%90%E5%8D%87app%E5%90%AF%E5%8A%A8%E9%80%9F%E5%BA%A6","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L13",null,{}]]}]]}],["$","$L14",null,{}]]}]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Android 性能优化之提升app启动速度 - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
