3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-950680b5068c0831.js"],""]
7:I[4266,["185","static/chunks/app/layout-950680b5068c0831.js"],"default"]
4:["id","9%E6%9C%885%E6%97%A5vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"]
0:["bbFeRMIduFcZud7BNs8NQ",[[["",{"children":["article",{"children":[["id","9%E6%9C%885%E6%97%A5vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"9月5日vue学习笔记\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["article",{"children":[["id","9%E6%9C%885%E6%97%A5vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/d0df4e9d9cd28850.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/c033a265c4b6e7f8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/81abeb1d965206f7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a46a6036119d7d12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/51cbc18a5b192d8f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L6",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_36bd41","children":[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aae87c042353adfd.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:I[2612,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
a:I[4306,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
b:I[231,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],""]
c:I[4254,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
e:I[3869,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
f:I[5339,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"Waline"]
10:I[8360,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
11:I[4226,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
d:T44ac,
    <p class="time">发布时间：<time datetime="05 September, 2022">2022-09-05 17:18:34</time></p>
    <p class="words">本文字数：1,428 字       阅读完需：约 5 分钟</p>
    <h2>模板语法</h2>
<p>关键字：<code>template</code></p>
<pre><code class="language-html">&#x3C;!DOCTYPE html>
&#x3C;html lang="en">
&#x3C;head>
    &#x3C;meta charset="UTF-8">
    &#x3C;meta http-equiv="X-UA-Compatible" content="IE=edge">
    &#x3C;meta name="viewport" content="width=device-width, initial-scale=1.0">
    &#x3C;title>9月5号&#x3C;/title>
    &#x3C;script src="js/vue.js">&#x3C;/script>
&#x3C;/head>
&#x3C;body>
    &#x3C;div id="app">
        宁波加油！
    &#x3C;/div>
    &#x3C;script>
        new Vue({
            el:'#app',
            template:'&#x3C;div>长春加油{{msg}}&#x3C;/div>',
            data:{
                msg:'!'
            }
        })
    &#x3C;/script>
&#x3C;/body>
&#x3C;/html>
</code></pre>
<p>模板<code>template</code>内的内容对<code>#app</code>内的内容进行全部覆盖，所以显示效果为长春加油</p>
<h2>ES6新语法</h2>
<p>用``替代''，可以在句中直接进行换行</p>
<h2>rander</h2>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        宁波加油！
    &#x3C;/div>
    &#x3C;script>
        new Vue({
            el:'#app',
            render(h) {
                return h('h1',{style:'background-color:red'}, '长春加油')
            },
            data:{
                msg:'!'
            }
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<p><code>rander</code>:新建一个元素，上述例子则是新建了一个<code>&#x3C;h1></code>标签</p>
<h2>观察属性</h2>
<p>观察属性：监听属性，会监听当前实例对象或组件对象的数据属性</p>
<pre><code class="language-html">&#x3C;!DOCTYPE html>
&#x3C;html lang="en">
&#x3C;head>
    &#x3C;meta charset="UTF-8">
    &#x3C;meta http-equiv="X-UA-Compatible" content="IE=edge">
    &#x3C;meta name="viewport" content="width=device-width, initial-scale=1.0">
    &#x3C;title>9月5号&#x3C;/title>
    &#x3C;script src="js/vue.js">&#x3C;/script>
    &#x3C;style>
        body{
            background-color: black;
            color: white;
        }
    &#x3C;/style>
&#x3C;/head>
&#x3C;body>
    &#x3C;div id="app">
        账号: &#x3C;input type="text" v-model="userId">    &#x3C;/div>
    &#x3C;script>
        new Vue({
            el:'#app',
            data:{
                userId:''
            },
            watch:{
                userId: function(newValue, oldValue){
                    console.info(oldValue);
                    console.info(newValue); 
                }
            }

        });
    &#x3C;/script>
&#x3C;/body>
&#x3C;/html>
</code></pre>
<p>上面是监听的简写，以下为完全体</p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        账号: &#x3C;input type="text" v-model="userId">    &#x3C;/div>
    &#x3C;script>
        new Vue({
            el:'#app',
            data:{
                userId:''
            },
            watch:{
                userId: {
                    handler(newVal,oldVal){
                        console.info(oldVal);
                        console.info(newVal);
                    },
                    deep: true, //是否深度监听，监听对象时同时监听对象的属性值是否改变，而不是只监听对象内存地址的变化
                    immediate: true 
                },           
            }

        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<h2>计算属性</h2>
<p>计算属性：用于处理页面的复杂逻辑</p>
<p>关键字: <code>computed</code></p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        姓: &#x3C;input type="text" v-model="firstName"/>
        名: &#x3C;input type="text" v-model="lastName"/>
    &#x3C;/div>
    &#x3C;script>
        new Vue({
            el:'#app',
            data:{
                firstName:'',
                lastName:''
                //fullName是计算属性，不要在data中定义
            },
            computed:{
                //默认情况下，function为fullName的get方法，也就是赋值方法
                fullName: function(){
                    return this.fullName+this.lastName;
                }
            }

        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<p>完全体：带set方法</p>
<pre><code class="language-html">
&#x3C;body>
    &#x3C;div id="app">
        姓: &#x3C;input type="text" v-model="firstName" />
        名: &#x3C;input type="text" v-model="lastName" />
    &#x3C;/div>
    &#x3C;script>
        let vm = new Vue({
            el: '#app',
            data: {
                firstName: '',
                lastName: ''
                //fullName是计算属性，不要在data中定义
            },
            computed: {
                fullName: {
                    //当给fullName赋值时触发
                    set: function (newVal) {
                        let data = newVal.split(".");
                        this.firstName = data[0];
                        this.lastName = data[1];
                    },
                    //默认情况下，function为fullName的get方法，也就是赋值方法
                    get: function () {
                        return this.fullName + this.lastName;
                    }

                }
            }

        });
        vm.fullName = '李.雷'
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<h3>实例：字符串实时反转</h3>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        文字: &#x3C;input v-model="origin" /> 反转：{{reverse_t}}
    &#x3C;/div>
    &#x3C;script>
        new Vue({
            el:'#app',
            data:{
                origin:"",
            },
            computed:{
                reverse_t(){
                    let arr = this.origin.split("");
                    arr = arr.reverse();
                    return arr.join("");
                }
            }

        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<h2>vue组件式开发</h2>
<h2>组件的定义</h2>
<p>组件：html/css/js的组合<br>
目的：复用代码</p>
<p>使用方法实例：</p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;my-com>&#x3C;/my-com>
        &#x3C;my-com>&#x3C;/my-com>
        &#x3C;my-com>&#x3C;/my-com>
        &#x3C;my-com>&#x3C;/my-com>
    &#x3C;/div>
    &#x3C;script>
        //注册全局组件(横杠命令方式)
        Vue.component('my-com',{
            template: `&#x3C;div>我是全局组件&#x3C;/div>`
        })
        new Vue({
            el:'#app',
            data:{

            },
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<p>结果：</p>
<pre><code class="language-text">我是全局组件
我是全局组件
我是全局组件
我是全局组件
</code></pre>
<h3>局部组件</h3>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;my-com>&#x3C;/my-com>
        &#x3C;one>&#x3C;/one>
        &#x3C;two>&#x3C;/two>
    &#x3C;/div>
    &#x3C;script>
        //注册全局组件(横杠命令方式)
        Vue.component('my-com',{
            template: `&#x3C;div>我是全局组件&#x3C;/div>`
        })
        let con1 = {
            template:`&#x3C;div>我是局部组件1&#x3C;/div>`
        }
        let con2 = {
            template:`&#x3C;div>我是局部组件2&#x3C;/div>`
        }
        new Vue({
            el:'#app',
            data:{
            },
            //局部组件在此声明注册即可
            components:{
                'one': con1,
                'two': con2
            }
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<p>spa应用：每一个网页作为一个组件嵌入</p>
<pre><code class="language-html">    &#x3C;div id="app">
        &#x3C;my-com>&#x3C;/my-com>
        &#x3C;one>&#x3C;/one>
        &#x3C;two>&#x3C;/two>
        &#x3C;three>&#x3C;/three>
    &#x3C;/div>
    &#x3C;script>
        //注册全局组件(横杠命令方式)
        Vue.component('my-com',{
            template: `&#x3C;div>我是全局组件&#x3C;/div>`
        })
        let con1 = {
            template:`&#x3C;div>我是局部组件1&#x3C;/div>`
        }
        let con2 = {
            template:`&#x3C;div>我是局部组件2&#x3C;/div>`
        }
        let con3 = {
            template:`&#x3C;div>我是局部组件3{{msg}}&#x3C;/div>`,
            data() {
                return {
                    msg:'!'
                }
            },
        }
        new Vue({
            el:'#app',
            data:{
            },
            components:{
                'one': con1,
                'two': con2,
                'three':con3
            }
        });
    &#x3C;/script>
</code></pre>
<h2>生命周期和钩子函数</h2>
<p><img src="md01.PNG" alt="alt">
<img src="md02.PNG" alt="alt"></p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;three>&#x3C;/three>
    &#x3C;/div>
    &#x3C;script>

        let con3 = {
            template: `&#x3C;div>我是局部组件3{{msg}}&#x3C;/div>`,
            data() {
                return {
                    msg: '!'
                }
            },
            created() {
                console.info("created");
            },
            mounted() {
                console.info("mounted")
            },
        }
        new Vue({
            el: '#app',
            data: {
            },
            components: {
                'three': con3
            }
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<h2>父子组件</h2>
<h3>套用关系</h3>
<pre><code class="language-html">    &#x3C;div id="app">
        &#x3C;parent>&#x3C;/parent>
    &#x3C;/div>
    &#x3C;script>
        let child = {
            template:`&#x3C;div>我是子组件&#x3C;/div>`
        }
        let parent = {
            template:`&#x3C;div>我是父组件&#x3C;child>&#x3C;/child>&#x3C;/div>`,
            components: {
                'child':child
            }
        }

        new Vue({
            el: '#app',
            data: {
            },
            components: {
                'parent':parent
            }
        });
    &#x3C;/script>
</code></pre>
<h3>属性的传递</h3>
<p><code>prop</code>关键字用于子组件接收父组件传过来的参数<br>
示例：</p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;parent>&#x3C;/parent>
        
    &#x3C;/div>
    &#x3C;script>
        let child = {
            props:['name'],//prop关键字用于接收父组件传过来的属性名为name的参数
            template:`&#x3C;div>我是子组件, {{name}}&#x3C;/div>`
        }
        let parent = {
            template:`&#x3C;div>我是父组件&#x3C;child :name="msg">&#x3C;/child>&#x3C;/div>`,
            components: {
                'child':child
            },
            data() {
                return {
                    msg:"来自父组件的问候！"
                }
            },
        }

        new Vue({
            el: '#app',
            data: {
            },
            components: {
                'parent':parent
            }
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<pre><code class="language-html">&#x3C;!DOCTYPE html>
&#x3C;html lang="en">
&#x3C;head>
    &#x3C;meta charset="UTF-8"/>
    &#x3C;title>主页&#x3C;/title>
    &#x3C;script src="js/vue.js">&#x3C;/script>
&#x3C;/head>
&#x3C;body>
&#x3C;div id="app">
    &#x3C;parent>&#x3C;/parent>
&#x3C;/div>
&#x3C;script>
    let child = {
        props: ['user'],
        template: /*html*/`
          &#x3C;div>
           &#x3C;div>姓名:&#x3C;input v-model="person.name" />&#x3C;/div>
           &#x3C;div>性别:{{user.sex}}&#x3C;/div>
           &#x3C;div>年龄:{{user.age}}&#x3C;/div>
           &#x3C;div>住址:{{user.address}}&#x3C;/div>
          &#x3C;/div>'`,
          data() {
            return {
                //初始化person对象
                person:{}
            }
          },
          watch:{
            user: function (val) {
                //对象克隆，把val对象里的属性和方法克隆给person对象，新对象内存地址和val不同，达到解绑的目的
                this.person = Object.assign({},val);
                
            }
          }
    }
    let parent = {
        template: `
          &#x3C;div>
          &#x3C;div v-show="show">&#x3C;child :user="user" >&#x3C;/child>&#x3C;/div>
          &#x3C;h2>信息表&#x3C;/h2>
          &#x3C;table border="1">
            &#x3C;thead>
            &#x3C;th>姓名&#x3C;/th>
            &#x3C;th>性别&#x3C;/th>
            &#x3C;th>年龄&#x3C;/th>
            &#x3C;th>住址&#x3C;/th>
            &#x3C;th>操作&#x3C;/th>
            &#x3C;/thead>
            &#x3C;tbody>
            &#x3C;tr v-for="user in dataList">
              &#x3C;td>{{user.name}}&#x3C;/td>
              &#x3C;td>{{user.sex}}&#x3C;/td>
              &#x3C;td>{{user.age}}&#x3C;/td>
              &#x3C;td>{{user.address}}&#x3C;/td>
              &#x3C;td>&#x3C;button @click="edit(user)" >修改&#x3C;/button>&#x3C;/td>
            &#x3C;/tr>
            &#x3C;/tbody>
          &#x3C;/table>
          &#x3C;/div>`,
        data() {
            return {
                dataList: [{name: '李雷', sex: '男', age: 20, address: '宁波'}, {name: '韩梅梅', sex: '女', age: 18, address: '长春'}],
                show: false,
                user: {}
            }
        },
        methods: {
          edit(user){
              this.show = true;
              this.user = user;
          }
        },
        components: {
            'child': child
        }
    }
    new Vue({
        el: '#app',
        data: {},
        components: {
            'parent': parent
        }
    });
&#x3C;/script>
&#x3C;/body>
&#x3C;/html>
</code></pre>
<h2>动态组件</h2>
<p>关键字: <code>&#x3C;component :is="val">&#x3C;/component></code><br>
在切换的过程中，未被激活的动态组件会被销毁</p>
<p>例子：点击对应按钮，加载相应的组件</p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;parent>&#x3C;/parent>
        
    &#x3C;/div>
    &#x3C;script>
        let ch1 = {
            template: `&#x3C;div>子组件1&#x3C;/div>`
        }
        let ch2 = {
            template: `&#x3C;div>子组件2&#x3C;/div>`
        }
        let ch3 = {
            template: `&#x3C;div>子组件3&#x3C;/div>`
        }
        let parent = {
            template:/*html*/`&#x3C;div>
               
                &#x3C;button @click="change(1)">1&#x3C;/button>&#x3C;button @click="change(2)">2&#x3C;/button>&#x3C;button @click="change(3)">3&#x3C;/button>
                &#x3C;!-- keepalive 不销毁组件，而是存入内存，等待下次加载 -->
                &#x3C;keep-alive>
                &#x3C;!-- 动态组件 -->
                &#x3C;component :is="val">&#x3C;/component> 
                &#x3C;/keep-alive>
                
                &#x3C;/div>`,
            components:{
                'ch1':ch1,
                'ch2':ch2,
                'ch3':ch3
            },
            data() {
                return {
                    val: 'ch1'
                }
            },
            methods: {
                change(i){
                    this.val = 'ch' + i;
                }
            },
        }

        new Vue({
            el: '#app',
            data: {
            },
            components: {
                'parent':parent
            }
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<h2>递归组件</h2>
<p>示例<br>
myCom是对象名，my-com是在Vue中的父组件名，com是作为子组件的myCom名，以进行递归</p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;my-com>&#x3C;/my-com>
        
    &#x3C;/div>
    &#x3C;script>

        let myCom = {
            template:/*html*/`
                &#x3C;div>&#x3C;button @click="getChild()">递归组件&#x3C;/button>&#x3C;com v-if="show">&#x3C;/com>&#x3C;/div>
                `,
            name:'com',
            data() {
                return {
                    show:false
                }
            },
            methods: {
                getChild(){
                    this.show=myCom
                }
            },
            
            
        }

        new Vue({
            el: '#app',
            data: {
            },
            components: {
                'my-com': myCom
            }
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>
<h2>异步组件</h2>
<p>vue允许以工厂函数的方式定义组件，这个工厂函数会异步解析组件定义，只有在组件需要渲染的时候才会触发该工厂函数，且把结果缓存起来供未来重新渲染。</p>
<pre><code class="language-html">&#x3C;body>
    &#x3C;div id="app">
        &#x3C;my-com>&#x3C;/my-com>
        
    &#x3C;/div>
    &#x3C;script>
        Vue.component('my-com', function(resolve, reject){
            setTimeout(function(){
                resolve({
                    template: `&#x3C;div>我是异步组件&#x3C;/div>`
                })
            }, 3000)
        })
       

        new Vue({
            el: '#app',
            data: {
            }
            
        });
    &#x3C;/script>
&#x3C;/body>
</code></pre>

  2:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$L9",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$La",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"9月5日vue学习笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Lb","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Lb","1",{"href":"/articles/前端技术/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"前端技术"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"vue"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"前端"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"html"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"css"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"javascript"}]]]}],["$","$Lc",null,{"path":"9%E6%9C%885%E6%97%A5vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}],["$","$Lf",null,{"path":"9%E6%9C%885%E6%97%A5vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L10",null,{}]]}]]}],["$","$L11",null,{}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"9月5日vue学习笔记 - 流年石刻"}],["$","meta","3",{"name":"next-size-adjust"}]]
1:null
