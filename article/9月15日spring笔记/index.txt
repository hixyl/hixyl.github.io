3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-950680b5068c0831.js"],""]
7:I[4266,["185","static/chunks/app/layout-950680b5068c0831.js"],"default"]
4:["id","9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"]
0:["bbFeRMIduFcZud7BNs8NQ",[[["",{"children":["article",{"children":[["id","9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"9月15日spring笔记\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["article",{"children":[["id","9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/d0df4e9d9cd28850.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/c033a265c4b6e7f8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/81abeb1d965206f7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a46a6036119d7d12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/51cbc18a5b192d8f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L6",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_36bd41","children":[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aae87c042353adfd.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:I[2612,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
a:I[4306,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
b:I[231,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],""]
c:I[4254,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
e:I[3869,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
f:I[5339,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"Waline"]
10:I[8360,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
11:I[4226,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
d:T31a4,
    <p class="time">发布时间：<time datetime="15 September, 2022">2022-09-15 17:07:57</time></p>
    <p class="words">本文字数：1,236 字       阅读完需：约 5 分钟</p>
    <h2>利用注解进行Bean的自动扫描管理</h2>
<p>使用注解注入可以省略set方法</p>
<p><img src="9_15_01.PNG" alt="alt"></p>
<p>例子：</p>
<p>spring-scan.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
    &#x3C;!--    扫描包-->
    &#x3C;context:component-scan base-package="com.scan">&#x3C;/context:component-scan>
&#x3C;/beans>
</code></pre>
<ol>
<li>会扫描com.scan包及所有自包下的类</li>
<li>spring会管理如下规则的类</li>
</ol>
<p>类上加注解：</p>
<p><code>@Controller</code> (controller层 action)<br>
<code>@Service</code> (service层 model)<br>
<code>@Repository</code> (dao层)<br>
<code>@Component</code> (其他层)</p>
<p>四个注解的区别：<strong>无</strong></p>
<p>以下注解写在属性之前，见下例<br>
<code>@Value("注入的属性值")</code> :自动根据类型byType注入
<code>@Autowired</code> :自动根据类型byType注入</p>
<p>Computer.java</p>
<pre><code class="language-java">package com.scan;

import org.springframework.stereotype.Component;

@Component("com")
public class Computer {
    @value("小米")
    private String name;

    // @Resource(name = "intel") //根据name注入，不需Qualifier和Autowired
    @Qualifier("AMD") //过滤名为AMD的CPU的实现类
    @Autowired //自动根据类型byType注入
    private CPU cpu;

    @Override
    public String toString() {
        return "Computer{" +
                "name='" + name + '\'' +
                ", cpu=" + cpu +
                '}';
    }


    
}
</code></pre>
<p>TestScan.java</p>
<pre><code class="language-java">package com.scan;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestScan {
    public static void main(String[] args) {
        ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext("spring-scan.xml");

        Computer computer = (Computer) ac.getBean("com");

        System.out.println(computer);
    }
}
</code></pre>
<p>Intel.java</p>
<pre><code class="language-java">package com.scan;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class Intel implements CPU {
    @Value("I9")
    private String name;

    @Override
    public String toString() {
        return "Intel{" +
                "name='" + name + '\'' +
                '}';
    }
}
</code></pre>
<p>AMD.java</p>
<pre><code class="language-java">package com.scan;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class AMD implements CPU {

    @Value("R7")
    private String name;

    @Override
    public String toString() {
        return "AMD{" +
                "name='" + name + '\'' +
                '}';
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

</code></pre>
<p>输出结果如下：</p>
<pre><code class="language-text">Computer{name='小米', cpu='R7'}
</code></pre>
<h2>使用java类写spring配置</h2>
<p>使用<code>@Configuration</code>注解，自动扫描配置使用<code>@ComponentScan</code>注解<br>
在测试类中使用<code>AnnotationConfigApplicationContext</code>对象导入配置类，见下例</p>
<p>示例</p>
<p>SpringScanConfig.java</p>
<pre><code class="language-java">package com.scan;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan("com.scan")
public class SpringScanConfig {
}
</code></pre>
<p>TestScan.java</p>
<pre><code class="language-java">package com.scan;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestScan {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(SpringScanConfig.class);
        Computer computer = (Computer) ac.getBean("com");

        System.out.println(computer);
    }
}
</code></pre>
<h2>代理模式</h2>
<p>代理模式：代理模式又叫委托模式，是为某个对象提供一个代理对象，并且由代理对象控制对原对象的访问。</p>
<p>静态代理：目标类和代理类有相同的接口<br>
动态代理：代理类是动态生成的，目标类和代理类可以没有相同的接口</p>
<h3>静态代理简单示例</h3>
<p>Star.java</p>
<pre><code class="language-java">package com.zr.proxy;

public interface Star {
    //赚钱
    void makeMoney(int money);

    //秀恩爱
    void showLove();
}
</code></pre>
<p>BaoQiang.java</p>
<pre><code class="language-java">package com.zr.proxy;

public class BaoQiang implements Star{
    @Override
    public void makeMoney(int money) {
        System.out.println("宝强赚了"+money+"钱，宝强笑嘿嘿");
    }

    @Override
    public void showLove() {
        System.out.println("宝强秀恩爱,别人都羡慕");
    }
}
</code></pre>
<p>SongZhe.java</p>
<pre><code class="language-java">package com.zr.proxy;

import java.util.Random;

public class SongZhe implements Star{

    private Star star;

    public SongZhe(Star star) {
        this.star = star;
    }

    @Override
    public void makeMoney(int money) {
        System.out.println("宋喆抽成500....");
        star.makeMoney(money);
    }

    @Override
    public void showLove() {
        boolean r = new Random().nextBoolean();
        if(r){
            star.showLove();
        }
        else{
            System.out.println("宋喆偷偷找马蓉");
        }
    }
}
</code></pre>
<p>TestStar.java</p>
<pre><code class="language-java">package com.zr.proxy;

import org.junit.Test;

public class TestStar {
    @Test
    public void star(){
        BaoQiang baoQiang = new BaoQiang();
        SongZhe songZhe = new SongZhe(baoQiang);
        songZhe.makeMoney(1000);
        songZhe.showLove();

    }
}
</code></pre>
<p>运行结果</p>
<pre><code class="language-text">宋喆抽成500....
宝强赚了1000钱，宝强笑嘿嘿
宝强秀恩爱,别人都羡慕
</code></pre>
<h3>动态代理示例</h3>
<p>TestStar.java</p>
<pre><code class="language-java">    @Test
    public void myStar(){
        //生成被代理类对象
        Star star = new BaoQiang();
        //生成代理类对象
        Star proxy = (Star) Proxy.newProxyInstance(star.getClass().getClassLoader(), star.getClass().getInterfaces(), new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                System.out.println(proxy.getClass().getName());
                if(method.getName().equals("makeMoney")){
                    args[0] = 1000;
                }
                return method.invoke(star, args);
            }
        });
        proxy.makeMoney(2000);
        System.out.println("proxy==>" + proxy.getClass().getName());
    }
</code></pre>
<h2>java注解</h2>
<p>定义一个注解</p>
<p>MyWeb.java</p>
<pre><code class="language-java">package com.zr.annotation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * 定义一个注解
 */
//以下为元注解
@Target({ElementType.TYPE, ElementType.METHOD}) //修饰的注解能放到java类和方法的某一位置
@Retention(RetentionPolicy.RUNTIME) //注解的生效范围(RUNTIME指运行时生效)
public @interface MyWeb {
    String value() default "";
    String [] url() default {};
}
</code></pre>
<p>TestWeb.java</p>
<pre><code class="language-java">package com.zr.annotation;

import org.junit.Test;

public class TestWeb {
    @Test
    public void test(){
        //tomcat收到前端请求 /user/web, 需要判断交给哪个servlet来处理
        //tomcat遍历所有类，判断哪些类加了 MyWeb注解
        Class&#x3C;?> clazz = UserWeb.class;
        MyWeb myWeb = clazz.getAnnotation(MyWeb.class);
        System.out.println(myWeb.value());
        //tomcat发现UserWeb类的MyWeb注解，value属性值和/user/web匹配，进入后续处理....
    }
}
</code></pre>
<h2>AOP (面向切面编程)</h2>
<p>AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充</p>
<p>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务和日志管理是 J2EE 应用中一个关于横切关注点的很好的例子。 在 Spring AOP 中，切面可以使用通用类（基于模式的风格）  或者在普通类中以 @Aspect 标注（@AspectJ 风格）来实现；</p>
<h3>示例</h3>
<p>spring-aop.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="UTF-8"?>
&#x3C;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    &#x3C;bean id="man" class="com.aop.Man">&#x3C;/bean>
    &#x3C;bean id="fbi" class="com.aop.FBI">&#x3C;/bean>
    &#x3C;aop:config>
&#x3C;!-- 切面规则   执行在Man的任意方法,参数为任意-->
        &#x3C;aop:pointcut id="pointcut" expression="execution(* com.aop.Man.*(..))"/>
        &#x3C;aop:aspect ref="fbi">
&#x3C;!--            fbi这个bean的before方法 :before为前置通知-->
            &#x3C;aop:before method="before" pointcut-ref="pointcut">&#x3C;/aop:before>
        &#x3C;/aop:aspect>
    &#x3C;/aop:config>
&#x3C;/beans>
</code></pre>
<p>FBI.java</p>
<pre><code class="language-java">package com.aop;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;

import java.util.Arrays;

public class FBI {
    public void before(JoinPoint joinPoint){
        Object obj =  joinPoint.getTarget();
        System.out.println("目标对象: "+ obj.getClass().getName());
        Object[] args = joinPoint.getArgs();
        System.out.println("目标对象方法参数: "+ Arrays.toString(args));
        Signature signature = joinPoint.getSignature();
        System.out.println("目标对象的方法: "+signature.getName());
    }
}
</code></pre>
<p>Man.java</p>
<pre><code class="language-java">package com.aop;

public class Man {
    private String name = "大壮";

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void qq(String toName){
        System.out.println(this.name + "在和[" + toName + "]聊QQ");
    }

    public void  mm(){
        System.out.println(this.name + "在聊MM");
    }
}
</code></pre>
<p>TestAop.java</p>
<pre><code class="language-java">package com.aop;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestAop {
    private ClassPathXmlApplicationContext ac;

    @Before
    public void init(){
        ac = new ClassPathXmlApplicationContext("spring-aop.xml");
    }
    @Test
    public void testBefore(){
        Man man = ac.getBean(Man.class);
        man.qq("小美");
        man.mm();
    }
    @After
    public void destroy(){
        ac.close();
    }
}
</code></pre>
<p>输出结果：</p>
<pre><code class="language-text">目标对象: com.aop.Man
目标对象方法参数: [小美]
目标对象的方法: qq
大壮在和[小美]聊QQ
目标对象: com.aop.Man
目标对象方法参数: []
目标对象的方法: mm
大壮在聊MM
</code></pre>
<p><img src="9_15_02.PNG" alt="alt">
<img src="9_15_03.PNG" alt="alt">
<img src="9_15_04.PNG" alt="alt">
<img src="9_15_05.PNG" alt="alt"></p>

  2:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$L9",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$La",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"9月15日spring笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Lb","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Lb","1",{"href":"/articles/后端学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"后端学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"java"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"后端"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"spring"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"AOP"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"面向切面编程"}],["$","p","5",{"className":"tags_tag__HZYxk ","children":"注解"}],["$","p","6",{"className":"tags_tag__HZYxk ","children":"代理模式"}]]]}],["$","$Lc",null,{"path":"9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}],["$","$Lf",null,{"path":"9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L10",null,{}]]}]]}],["$","$L11",null,{}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"9月15日spring笔记 - 流年石刻"}],["$","meta","3",{"name":"next-size-adjust"}]]
1:null
