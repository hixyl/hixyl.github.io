1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/bd11598418e3da16.css",{"as":"style"}]
0:["XWgrdYolWF01zMqFEEjan",[[["",{"children":["article",{"children":[["id","9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"9月15日spring笔记\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bd11598418e3da16.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/43b3c97735dbc54a.css",{"as":"style"}]
6:HL["/_next/static/css/99f6a99e5e57ec87.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-197ddff278417bf1.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-fdd168ef0df5370b.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-fdd168ef0df5370b.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-197ddff278417bf1.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_20951f","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"9月15日spring笔记\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/43b3c97735dbc54a.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next"}]]}],"segment":["id","9%E6%9C%8815%E6%97%A5spring%E7%AC%94%E8%AE%B0","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"9月15日spring笔记 - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
c:I{"id":4733,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
10:I{"id":8914,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
11:I{"id":2953,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
12:I{"id":633,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
f:T75d1,
    <p class="time">发布时间：<time datetime="15 September, 2022">2022-09-15 17:07:57</time></p>
    <p class="words">本文字数：1,236 字       阅读完需：约 5 分钟</p>
    <html><head></head><body><h2>利用注解进行Bean的自动扫描管理</h2>
<p>使用注解注入可以省略set方法</p>
<p><img src="9_15_01.PNG" alt="alt"></p>
<p>例子：</p>
<p>spring-scan.xml</p>
<pre><code class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>
       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span>
       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span>
    <span class="hljs-comment">&lt;!--    扫描包--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.scan"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span>
</code></pre>
<ol>
<li>会扫描com.scan包及所有自包下的类</li>
<li>spring会管理如下规则的类</li>
</ol>
<p>类上加注解：</p>
<p><code><span class="hljs-meta">@Controller</span></code> (controller层 action)<br>
<code><span class="hljs-meta">@Service</span></code> (service层 model)<br>
<code><span class="hljs-meta">@Repository</span></code> (dao层)<br>
<code><span class="hljs-meta">@Component</span></code> (其他层)</p>
<p>四个注解的区别：<strong>无</strong></p>
<p>以下注解写在属性之前，见下例<br>
<code><span class="hljs-meta">@Value(<span class="hljs-string">"注入的属性值"</span>)</span></code> :自动根据类型byType注入
<code><span class="hljs-meta">@Autowired</span></code> :自动根据类型byType注入</p>
<p>Computer.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.scan;

<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;

<span class="hljs-meta">@Component(<span class="hljs-string">"com"</span>)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span> {
    <span class="hljs-meta">@value(<span class="hljs-string">"小米"</span>)</span>
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-comment">// @Resource(name = "intel") //根据name注入，不需Qualifier和Autowired</span>
    <span class="hljs-meta">@Qualifier(<span class="hljs-string">"AMD"</span>)</span> <span class="hljs-comment">//过滤名为AMD的CPU的实现类</span>
    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//自动根据类型byType注入</span>
    <span class="hljs-keyword">private</span> CPU cpu;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String toString() {
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Computer{"</span> +
                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +
                <span class="hljs-string">", cpu="</span> + cpu +
                <span class="hljs-string">'}'</span>;
    }


    
}
</code></pre>
<p>TestScan.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.scan;

<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestScan</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"spring-scan.xml"</span>);

        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> (Computer) ac.getBean(<span class="hljs-string">"com"</span>);

        System.out.println(computer);
    }
}
</code></pre>
<p>Intel.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.scan;

<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Intel</span> <span class="hljs-title">implements</span> <span class="hljs-title">CPU</span> {
    <span class="hljs-meta">@Value(<span class="hljs-string">"I9"</span>)</span>
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String toString() {
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Intel{"</span> +
                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +
                <span class="hljs-string">'}'</span>;
    }
}
</code></pre>
<p>AMD.java</p>
<pre><code class="language-java">package com.<span class="hljs-property">scan</span>;

<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Value</span>;
<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">stereotype</span>.<span class="hljs-property">Component</span>;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AMD</span> <span class="hljs-keyword">implements</span> <span class="hljs-variable constant_">CPU</span> {

    <span class="hljs-meta">@Value</span>(<span class="hljs-string">"R7"</span>)
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-string">"AMD{"</span> +
                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +
                <span class="hljs-string">'}'</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
    }
}

</code></pre>
<p>输出结果如下：</p>
<pre><code class="language-text">Computer{<span class="hljs-attribute">name</span>=<span class="hljs-string">'小米'</span>, <span class="hljs-attribute">cpu</span>=<span class="hljs-string">'R7'</span>}
</code></pre>
<h2>使用java类写spring配置</h2>
<p>使用<code><span class="hljs-meta">@Configuration</span></code>注解，自动扫描配置使用<code><span class="hljs-meta">@ComponentScan</span></code>注解<br>
在测试类中使用<code><span class="hljs-attribute">AnnotationConfigApplicationContext</span></code>对象导入配置类，见下例</p>
<p>示例</p>
<p>SpringScanConfig.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.scan;

<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.ComponentScan;
<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-meta">@ComponentScan(<span class="hljs-string">"com.scan"</span>)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringScanConfig</span> {
}
</code></pre>
<p>TestScan.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.scan;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;
<span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestScan</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringScanConfig.class);
        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> (Computer) ac.getBean(<span class="hljs-string">"com"</span>);

        System.out.println(computer);
    }
}
</code></pre>
<h2>代理模式</h2>
<p>代理模式：代理模式又叫委托模式，是为某个对象提供一个代理对象，并且由代理对象控制对原对象的访问。</p>
<p>静态代理：目标类和代理类有相同的接口<br>
动态代理：代理类是动态生成的，目标类和代理类可以没有相同的接口</p>
<h3>静态代理简单示例</h3>
<p>Star.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.proxy;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Star</span> </span>{
    <span class="hljs-comment">//赚钱</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span></span>;

    <span class="hljs-comment">//秀恩爱</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showLove</span><span class="hljs-params">()</span></span>;
}
</code></pre>
<p>BaoQiang.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.proxy;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaoQiang</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Star</span></span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">makeMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money)</span> </span>{
        System.out.println(<span class="hljs-string">"宝强赚了"</span>+money+<span class="hljs-string">"钱，宝强笑嘿嘿"</span>);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showLove</span><span class="hljs-params">()</span> </span>{
        System.out.println(<span class="hljs-string">"宝强秀恩爱,别人都羡慕"</span>);
    }
}
</code></pre>
<p>SongZhe.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.proxy;

<span class="hljs-keyword">import</span> java.util.Random;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SongZhe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Star</span>{

    <span class="hljs-keyword">private</span> Star star;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SongZhe</span><span class="hljs-params">(Star star)</span> {
        <span class="hljs-built_in">this</span>.star = star;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeMoney</span><span class="hljs-params">(<span class="hljs-type">int</span> money)</span> {
        System.out.println(<span class="hljs-string">"宋喆抽成500...."</span>);
        star.makeMoney(money);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showLove</span><span class="hljs-params">()</span> {
        <span class="hljs-type">boolean</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextBoolean();
        <span class="hljs-keyword">if</span>(r){
            star.showLove();
        }
        <span class="hljs-keyword">else</span>{
            System.out.println(<span class="hljs-string">"宋喆偷偷找马蓉"</span>);
        }
    }
}
</code></pre>
<p>TestStar.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.proxy;

<span class="hljs-keyword">import</span> org.junit.Test;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStar</span> {
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">star</span><span class="hljs-params">()</span>{
        <span class="hljs-type">BaoQiang</span> <span class="hljs-variable">baoQiang</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaoQiang</span>();
        <span class="hljs-type">SongZhe</span> <span class="hljs-variable">songZhe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SongZhe</span>(baoQiang);
        songZhe.makeMoney(<span class="hljs-number">1000</span>);
        songZhe.showLove();

    }
}
</code></pre>
<p>运行结果</p>
<pre><code class="language-text">宋喆抽成<span class="hljs-number">500</span>....
宝强赚了<span class="hljs-number">1000</span>钱，宝强笑嘿嘿
宝强秀恩爱,别人都羡慕
</code></pre>
<h3>动态代理示例</h3>
<p>TestStar.java</p>
<pre><code class="language-java">    @Test
    public void my<span class="hljs-constructor">Star()</span>{
        <span class="hljs-comment">//生成被代理类对象</span>
        Star star = <span class="hljs-keyword">new</span> <span class="hljs-constructor">BaoQiang()</span>;
        <span class="hljs-comment">//生成代理类对象</span>
        Star proxy = (Star) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(<span class="hljs-params">star</span>.<span class="hljs-params">getClass</span>()</span>.get<span class="hljs-constructor">ClassLoader()</span>, star.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Interfaces()</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">InvocationHandler()</span> {
            @Override
            public Object invoke(Object proxy, Method <span class="hljs-keyword">method</span>, Object<span class="hljs-literal">[]</span> args) throws Throwable {
                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(proxy.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span>);
                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Name()</span>.equals(<span class="hljs-string">"makeMoney"</span>)){
                    args<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> = <span class="hljs-number">1000</span>;
                }
                return <span class="hljs-keyword">method</span>.invoke(star, args);
            }
        });
        proxy.make<span class="hljs-constructor">Money(2000)</span>;
        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">"proxy==&gt;"</span> + proxy.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Name()</span>);
    }
</code></pre>
<h2>java注解</h2>
<p>定义一个注解</p>
<p>MyWeb.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.annotation;

<span class="hljs-keyword">import</span> java.lang.annotation.ElementType;
<span class="hljs-keyword">import</span> java.lang.annotation.Retention;
<span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;
<span class="hljs-keyword">import</span> java.lang.annotation.Target;

<span class="hljs-comment">/**
 * 定义一个注解
 */</span>
<span class="hljs-comment">//以下为元注解</span>
<span class="hljs-meta">@Target({ElementType.TYPE, ElementType.METHOD})</span> <span class="hljs-comment">//修饰的注解能放到java类和方法的某一位置</span>
<span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">//注解的生效范围(RUNTIME指运行时生效)</span>
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyWeb {
    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">""</span>;
    String [] url() <span class="hljs-keyword">default</span> {};
}
</code></pre>
<p>TestWeb.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.<span class="hljs-keyword">annotation</span>;

<span class="hljs-keyword">import</span> org.junit.Test;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestWeb</span> {
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> void test(){
        <span class="hljs-comment">//tomcat收到前端请求 /user/web, 需要判断交给哪个servlet来处理</span>
        <span class="hljs-comment">//tomcat遍历所有类，判断哪些类加了 MyWeb注解</span>
        Class&lt;?&gt; clazz = UserWeb.<span class="hljs-keyword">class</span>;
        MyWeb myWeb = clazz.getAnnotation(MyWeb.<span class="hljs-keyword">class</span>);
        System.<span class="hljs-keyword">out</span>.println(myWeb.value());
        <span class="hljs-comment">//tomcat发现UserWeb类的MyWeb注解，value属性值和/user/web匹配，进入后续处理....</span>
    }
}
</code></pre>
<h2>AOP (面向切面编程)</h2>
<p>AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充</p>
<p>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务和日志管理是 J2EE 应用中一个关于横切关注点的很好的例子。 在 Spring AOP 中，切面可以使用通用类（基于模式的风格）  或者在普通类中以 @Aspect 标注（@AspectJ 风格）来实现；</p>
<h3>示例</h3>
<p>spring-aop.xml</p>
<pre><code class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span>
       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">"http://www.springframework.org/schema/aop"</span>
       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"man"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.aop.Man"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"fbi"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.aop.FBI"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>
<span class="hljs-comment">&lt;!-- 切面规则   执行在Man的任意方法,参数为任意--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"pointcut"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"execution(* com.aop.Man.*(..))"</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"fbi"</span>&gt;</span>
<span class="hljs-comment">&lt;!--            fbi这个bean的before方法 :before为前置通知--&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"before"</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">"pointcut"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span>
</code></pre>
<p>FBI.java</p>
<pre><code class="language-java">package com.aop;

<span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;
<span class="hljs-keyword">import</span> org.aspectj.lang.Signature;

<span class="hljs-keyword">import</span> java.util.Arrays;

<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> FBI {
    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">before</span>(JoinPoint joinPoint){
        <span class="hljs-keyword">Object</span> obj =  joinPoint.getTarget();
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("目标对象: "+ obj.getClass().getName());
        <span class="hljs-keyword">Object</span>[] args = joinPoint.getArgs();
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("目标对象方法参数: "+ Arrays.toString(args));
        Signature signature = joinPoint.getSignature();
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println("目标对象的方法: "+signature.getName());
    }
}
</code></pre>
<p>Man.java</p>
<pre><code class="language-java">package com.<span class="hljs-property">aop</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Man</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name = <span class="hljs-string">"大壮"</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">qq</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> toName</span>){
        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">"在和["</span> + toName + <span class="hljs-string">"]聊QQ"</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span>  <span class="hljs-title function_">mm</span>(<span class="hljs-params"></span>){
        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">"在聊MM"</span>);
    }
}
</code></pre>
<p>TestAop.java</p>
<pre><code class="language-java">package com.<span class="hljs-property">aop</span>;

<span class="hljs-keyword">import</span> org.<span class="hljs-property">junit</span>.<span class="hljs-property">After</span>;
<span class="hljs-keyword">import</span> org.<span class="hljs-property">junit</span>.<span class="hljs-property">Before</span>;
<span class="hljs-keyword">import</span> org.<span class="hljs-property">junit</span>.<span class="hljs-property">Test</span>;
<span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">support</span>.<span class="hljs-property">ClassPathXmlApplicationContext</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAop</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span> ac;

    <span class="hljs-meta">@Before</span>
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>){
        ac = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">"spring-aop.xml"</span>);
    }
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">testBefore</span>(<span class="hljs-params"></span>){
        <span class="hljs-title class_">Man</span> man = ac.<span class="hljs-title function_">getBean</span>(<span class="hljs-title class_">Man</span>.<span class="hljs-property">class</span>);
        man.<span class="hljs-title function_">qq</span>(<span class="hljs-string">"小美"</span>);
        man.<span class="hljs-title function_">mm</span>();
    }
    <span class="hljs-meta">@After</span>
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-params"></span>){
        ac.<span class="hljs-title function_">close</span>();
    }
}
</code></pre>
<p>输出结果：</p>
<pre><code class="language-text">目标对象: com<span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.Man</span>
目标对象方法参数: <span class="hljs-selector-attr">[小美]</span>
目标对象的方法: qq
大壮在和<span class="hljs-selector-attr">[小美]</span>聊QQ
目标对象: com<span class="hljs-selector-class">.aop</span><span class="hljs-selector-class">.Man</span>
目标对象方法参数: <span class="hljs-selector-attr">[]</span>
目标对象的方法: mm
大壮在聊MM
</code></pre>
<p><img src="9_15_02.PNG" alt="alt">
<img src="9_15_03.PNG" alt="alt">
<img src="9_15_04.PNG" alt="alt">
<img src="9_15_05.PNG" alt="alt"></p>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"9月15日spring笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Le","1",{"href":"/articles/后端学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"后端学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"java"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"后端"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"spring"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"AOP"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"面向切面编程"}],["$","p","5",{"className":"tags_tag__HZYxk ","children":"注解"}],["$","p","6",{"className":"tags_tag__HZYxk ","children":"代理模式"}]]]}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}],["$","$L10",null,{}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L11",null,{}]]}]]}],["$","$L12",null,{}]]}]
