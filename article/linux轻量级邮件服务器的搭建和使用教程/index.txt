1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/c6771dd8c665257b.css",{"as":"style"}]
0:["b9a8PnxJ6T87cYHNh85eN",[[["",{"children":["article",{"children":[["id","linux%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B","d"],{"children":["__PAGE__?{\"id\":\"linux轻量级邮件服务器的搭建和使用教程\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c6771dd8c665257b.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/4d166e604f6ba619.css",{"as":"style"}]
6:HL["/_next/static/css/99f6a99e5e57ec87.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-1c7fcb8e096f7f78.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-5297ab80a73cd07d.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-5297ab80a73cd07d.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-1c7fcb8e096f7f78.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_e66fe9","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","linux%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"linux轻量级邮件服务器的搭建和使用教程\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4d166e604f6ba619.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next"}]]}],"segment":["id","linux%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"基于docker的轻量级邮件服务器的搭建和使用教程 - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
c:I{"id":4733,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
f:I{"id":9777,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
11:I{"id":5529,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
12:I{"id":1848,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"Waline","async":false}
13:I{"id":2953,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
14:I{"id":633,"chunks":["577:static/chunks/221e729c-eb04291402bd74ea.js","231:static/chunks/9316e0b3-06fce1d7b5082435.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-a175b8ff92d72522.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-18aa656a1117c673.js"],"name":"","async":false}
10:T2af4,
    <p class="time">发布时间：<time datetime="27 November, 2022">2022-11-27 16:28:46</time></p>
    <p class="words">本文字数：1,080 字       阅读完需：约 3 分钟</p>
    <html><head></head><body><h2>前言</h2>
<p>很早就想配置一个自己的邮件服务器，苦于没有时间。偶然的机会，黑色星期五买了一台1G内存的特价服务器，开放了25端口，于是趁这个周末，决定搭建一个自己的域名邮箱。</p>
<p>技术选型: docker-mailserver</p>
<p>优势:</p>
<ol>
<li>
<p>简单/方便。你要知道自己去手动配一台这样功能完全的邮件服务器，也许一个晚上的时间都不够，稍微一个地方出错还可能用不了。</p>
</li>
<li>
<p>安全，你要知道邮件服务器，自用问题不大，如果是公共服务，各种SPAM/病毒邮件，你就会发现原来邮件服务器是真的难伺候。</p>
</li>
<li>
<p>也就是我个人觉得最重要的原因。我自建一个邮件服务器，是出于自用的目的，我拿一台VPS出来就只装一个邮件服务，我真的觉得太浪费。所以像这样用Docker，在部署完了后，我还可以装点别的程序跑一跑。而我之前介绍的Mailcow/Mailu/Poste.io这些，虽然它们都是用Docker部署的，但是都把80/443占用了，我们最多也就只能再跑一些小脚本，如果我们还想建站呢？那这些方案就不适合我们。</p>
</li>
</ol>
<h2>搭建步骤</h2>
<h3>配置DNS</h3>
<p>首先需要在主机商配置反向dns解析</p>
<p>之后前往域名提供商进行dns解析设置</p>
<p>|类型|记录名|记录值|
|--|--|--|
|A|mail|xxx.xxx.xxx.xxx(自己服务器的ip)|
|MX|@|mail.example.com(mail.&lt;域名&gt;); 优先级选10|
|TXT|@|v=spf1 mx ~all|</p>
<h3>使用certbot申请https证书</h3>
<p>安装好管理工具之后, 我们需要申请证书下来, 这里我的web服务器是NGINX, 并且我没有网站的静态目录, 所以我使用这个命令申请:</p>
<pre><code class="language-bash">sudo certbot certonly <span class="hljs-attr">--standalone</span> -d example<span class="hljs-selector-class">.com</span> -d www<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span> -d m<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span>
</code></pre>
<p>如果你的网站有静态目录的话, 可以把<code><span class="hljs-comment">--standalone</span></code>改成<code><span class="hljs-comment">--webroot</span></code>并且加上<code><span class="hljs-deletion">-w</span></code>参数申请, 类似这样:</p>
<pre><code class="language-bash">sudo certbot certonly <span class="hljs-attr">--webroot</span> -w /var/www/<span class="hljs-selector-tag">html</span> -d example<span class="hljs-selector-class">.com</span> -d www<span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span>
</code></pre>
<p>在你使用<code><span class="hljs-comment">--standalone</span></code>申请证书的时候需要关闭nginx, 因为certbot会启用443端口校验你的域名信息, 如果nginx没有关闭, 会导致端口占用, 所以我们关闭nginx, 我这里是使用ubuntu, 所以使用这个命令关闭nginx:</p>
<pre><code class="language-bash">sudo services nginx stop
</code></pre>
<p>更新证书时使用<code><span class="hljs-attribute">certbot renew</span></code>命令即可</p>
<p>使用<code><span class="hljs-attribute">crontab</span></code>添加定时任务</p>
<p>可使用crontab配置证书自动续签</p>
<pre><code class="language-bash"><span class="hljs-attribute">crontab</span> -e
<span class="hljs-comment"># 添加如下</span>
<span class="hljs-attribute">0</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> * * /usr/bin/certbot renew --quiet
</code></pre>
<ul>
<li><code><span class="hljs-symbol">0 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> * *</code> 指每个月1号3点0分执行任务</li>
</ul>
<h3>解析验证</h3>
<p>使用dig验证解析是否生效</p>
<pre><code class="language-bash">apt-get install dnsutils
dig TXT _acme-challenge<span class="hljs-selector-class">.mail</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span>
</code></pre>
<h3>安装docker</h3>
<p>基于debian11系统进行，参考官方文档 <a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/</a></p>
<pre><code class="language-bash"># 移除之前的版本
sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> docker docker-engine docker.io containerd runc 
# 安装依赖
sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span>
sudo apt-<span class="hljs-built_in">get</span> install \
    <span class="hljs-keyword">ca</span>-certificates \
    curl \
    gnupg \
    lsb-release
# 配置apt源
sudo <span class="hljs-built_in">mkdir</span> -<span class="hljs-keyword">p</span> /etc/apt/keyrings
curl -fsSL https://download.docker.<span class="hljs-keyword">com</span>/linux/debian/gpg | sudo gpg --dearmor -<span class="hljs-keyword">o</span> /etc/apt/keyrings/docker.gpg
<span class="hljs-keyword">echo</span> \
  <span class="hljs-comment">"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span>
  $(lsb_release -<span class="hljs-keyword">cs</span>) stable<span class="hljs-comment">" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span>
# 安装
sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span>
sudo apt-<span class="hljs-built_in">get</span> install docker-<span class="hljs-keyword">ce</span> docker-<span class="hljs-keyword">ce</span>-cli containerd.io docker-compose-plugin
</code></pre>
<h3>修改docker存储目录(可选)</h3>
<p>查看原始存储目录</p>
<pre><code class="language-bash"><span class="hljs-attribute">docker</span> <span class="hljs-literal">info</span>
</code></pre>
<p>可以发现<code><span class="hljs-attribute">Docker Root</span></code>项默认目录为<code>/<span class="hljs-keyword">var</span>/lib/docker</code></p>
<pre><code class="language-bash"><span class="hljs-built_in">cd</span> /etc/docker/
vim daemon.json
</code></pre>
<p>添加以下内容</p>
<pre><code class="language-json"><span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"data-root"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/data/docker"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>保存退出，然后重启 docker 服务：</p>
<pre><code class="language-bash"><span class="hljs-attribute">systemctl</span> restart docker
docker <span class="hljs-literal">info</span> <span class="hljs-comment"># 查看是否修改成功</span>
</code></pre>
<h3>拉取配置文件</h3>
<pre><code class="language-bash">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/docker-mailserver/docker-mailserver.git
<span class="hljs-comment"># 所需文件</span>
- docker-compose.yml 容器部署文件
- setup.sh 服务配置脚本
</code></pre>
<p>如果后续读取配置报错，需要在<code>docker-compose.yml</code>头部添加 <code><span class="hljs-symbol">version:</span> <span class="hljs-string">'3'</span></code> ，以配置版本</p>
<h3>开放端口</h3>
<p>需要开放[25,193,993,465,587]这几个端口，以下以ufw举例，具体开放防火墙请自行Google</p>
<pre><code class="language-bash"><span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">25</span>
<span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">143</span>
<span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">993</span>
<span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">465</span>
<span class="hljs-attribute">ufw</span> <span class="hljs-literal">allow</span> <span class="hljs-number">587</span>
</code></pre>
<h3>生成DKIM签名记录</h3>
<pre><code class="language-bash">./setup.sh config dkim keysize 2048
<span class="hljs-built_in">cd</span> ~/docker-mailserver/docker-data/dms/
<span class="hljs-built_in">cat</span> config/opendkim/keys/example.com/mail.txt
<span class="hljs-comment"># 截取格式如下</span>
v=DKIM1;h=sha256;k=rsa;p=xxx
</code></pre>
<p>添加到dns解析当中</p>
<p>|类型|记录名|记录值|
|--|--|--|
|TXT|mail._domainkey|v=DKIM1;h=sha256;k=rsa;p=xxx</p>
<h3>配置tls</h3>
<p>编辑docker-mailserver配置文件</p>
<pre><code class="language-bash"><span class="hljs-built_in">cd</span> docker-mailserver
vim .<span class="hljs-built_in">env</span>
</code></pre>
<p>编辑 -volumes配置项下添加 <code>- /etc/letsencrypt/<span class="hljs-symbol">:/etc/letsencrypt</span><span class="hljs-symbol">:ro</span></code></p>
<p>编辑<code>mailserver.<span class="hljs-keyword">env</span></code>文件</p>
<pre><code class="language-env"><span class="hljs-attr">SSL_TYPE</span>=letsencrypt
<span class="hljs-attr">SSL_CERT_PATH</span>=/etc/letsencrypt/live/mail.timeshike.com/fullchain.pem
<span class="hljs-attr">SSL_KEY_PATH</span>=/etc/letsencrypt/live/mail.timeshike.com/privkey.pem
</code></pre>
<p>最后重启docker-mailserver即可：</p>
<pre><code class="language-bash">docker-compose <span class="hljs-literal">stop</span>
systemctl restart docker.service
docker-compose up -d
docker-compose logs -f <span class="hljs-comment"># 查看容器日志</span>
</code></pre>
<p>安装完成!</p>
<h2>邮箱服务器管理</h2>
<p>利用<code>setup.sh</code>脚本可以轻松实现管理账户</p>
<p>可参考官方文档 <a href="https://docker-mailserver.github.io/docker-mailserver/edge/config/setup.sh/">https://docker-mailserver.github.io/docker-mailserver/edge/config/setup.sh/</a></p>
<pre><code class="language-bash">./setup.<span class="hljs-keyword">sh</span> email <span class="hljs-built_in">add</span> admin@example.<span class="hljs-keyword">com</span> <span class="hljs-string">"xxx"</span> # 添加账号密码
# 其他功能参见<span class="hljs-keyword">help</span>
./setup.<span class="hljs-keyword">sh</span> <span class="hljs-keyword">help</span>
</code></pre>
<h2>参考文章</h2>
<p>本文参考了以下博文，感谢作者的付出</p>
<ol>
<li><a href="https://blog.cetacean.top/mailserver/">https://blog.cetacean.top/mailserver/</a></li>
<li><a href="https://lala.im/4224.html">https://lala.im/4224.html</a></li>
<li><a href="https://docker-mailserver.github.io/docker-mailserver/edge/">https://docker-mailserver.github.io/docker-mailserver/edge/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/95533274">https://zhuanlan.zhihu.com/p/95533274</a></li>
</ol>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"基于docker的轻量级邮件服务器的搭建和使用教程"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/建站技术/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"建站技术"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"linux"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"docker"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"mail"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"server"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"教程"}]]]}],["$","$Lf",null,{"path":"linux%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}],["$","$L11",null,{}],["$","$L12",null,{"path":"linux%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L13",null,{}]]}]]}],["$","$L14",null,{}]]}]
