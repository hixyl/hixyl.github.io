1:HL["/_next/static/media/2aaf0723e720e8b9-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/bd11598418e3da16.css",{"as":"style"}]
0:["XWgrdYolWF01zMqFEEjan",[[["",{"children":["article",{"children":[["id","10%E6%9C%886%E6%97%A5%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%BA%93","d"],{"children":["__PAGE__?{\"id\":\"10月6日后端学习笔记-数据库\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bd11598418e3da16.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/43b3c97735dbc54a.css",{"as":"style"}]
6:HL["/_next/static/css/99f6a99e5e57ec87.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-197ddff278417bf1.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-fdd168ef0df5370b.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-fdd168ef0df5370b.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-197ddff278417bf1.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_20951f","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","10%E6%9C%886%E6%97%A5%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%BA%93","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"10月6日后端学习笔记-数据库\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/43b3c97735dbc54a.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next"}]]}],"segment":["id","10%E6%9C%886%E6%97%A5%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%BA%93","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"10月6日后端学习笔记(数据库) - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
c:I{"id":4733,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
10:I{"id":8914,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
11:I{"id":2953,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
12:I{"id":633,"chunks":["165:static/chunks/165-9f67d2f80e9188a0.js","945:static/chunks/945-dd57d3732d1beca5.js","985:static/chunks/985-6bd998473d3be578.js","241:static/chunks/app/article/[id]/page-87471cc585231b54.js"],"name":"","async":false}
f:T51d3,
    <p class="time">发布时间：<time datetime="06 October, 2022">2022-10-06 17:16:18</time></p>
    <p class="words">本文字数：1,194 字       阅读完需：约 4 分钟</p>
    <html><head></head><body><h2>jackson maven 依赖</h2>
<p>pom.xml</p>
<pre><code class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
</code></pre>
<h3>MappingJackson2HttpMessageConverter</h3>
<p>MappingJackson2HttpMessageConverter的意义是使用jackson处理controller层的返回值，将返回对象自动转为json字符串</p>
<p>spring-mvc.xml</p>
<pre><code class="language-xml">    <span class="hljs-comment">&lt;!--开启RequestMapping映射处理器和适配器--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"supportedMediaTypes"</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>
                        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html;charset=utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>
                    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>
</code></pre>
<p>配置完MappingJackson2HttpMessageConverter消息转换器后，只需要将controller层返回值改为ajaxresult对象即可，如下所示</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.controller.sys;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.zr.service.sys.SysUserService;
<span class="hljs-keyword">import</span> com.zr.utils.AjaxResult;
<span class="hljs-keyword">import</span> com.zr.vo.sys.SysUser;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.*;

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(<span class="hljs-string">"/sys/user"</span>)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SysUserController</span> {

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> SysUserService sysUserService;

    <span class="hljs-meta">@PostMapping(<span class="hljs-string">"/login.action"</span>)</span>
    <span class="hljs-keyword">public</span> AjaxResult login(<span class="hljs-meta">@RequestBody</span> SysUser sysUser){
        SysUser user = sysUserService.login(sysUser);
        AjaxResult ajaxResult = <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>) {
            ajaxResult = AjaxResult.success(<span class="hljs-number">200</span>,<span class="hljs-string">"登录成功"</span>, user);
        }<span class="hljs-keyword">else</span>{
            ajaxResult = AjaxResult.fail(<span class="hljs-number">200</span>,<span class="hljs-string">"账号或密码错误"</span>, <span class="hljs-literal">null</span>);
        }
         <span class="hljs-keyword">return</span> ajaxResult;
    }

}
</code></pre>
<h3>jsonformat注解</h3>
<p>加在vo层</p>
<pre><code class="language-java">    <span class="hljs-meta">@JsonFormat</span>(pattern = <span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>)
    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getCreateTime</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> createTime;
    }
</code></pre>
<h2>redis 基础</h2>
<h3>Redis数据类型</h3>
<ol>
<li>string（字符串）</li>
<li>hash（哈希）</li>
<li>list（列表）</li>
<li>set（集合</li>
<li>zset(sorted set：有序集合)</li>
</ol>
<h3>操作命令</h3>
<ol>
<li><code><span class="hljs-keyword">select</span> <span class="hljs-keyword">index</span></code> 选取数据库 index 0-15</li>
<li><code><span class="hljs-built_in">Keys</span> <span class="hljs-operator">*</span></code> 查看所有的值</li>
<li><code><span class="hljs-selector-tag">Del</span> key</code> 删除指定的key</li>
<li><code><span class="hljs-attribute">PEXPIRE key milliseconds</span></code> 设置key的过期时间 毫秒单位</li>
<li><code><span class="hljs-attribute">Pttl key</span></code> 获取key的剩余过期时间</li>
<li><code><span class="hljs-attribute">PERSIST key</span></code> 移除key的过期时间 将永久保存</li>
<li><code><span class="hljs-keyword">set</span> key <span class="hljs-comment">value</span></code> 设置键值</li>
<li><code><span class="hljs-built_in">get</span> <span class="hljs-built_in">key</span></code> 获取键值</li>
</ol>
<h3>Hash类型</h3>
<p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象GET key 获取指定key的value<br>
Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）</p>
<ol>
<li><code><span class="hljs-symbol">HMSET</span> key <span class="hljs-meta">field</span> value <span class="hljs-meta">field</span> value …</code> 设置key及hash字段和值</li>
<li><code><span class="hljs-attribute">HGETALL key</span></code> 获取在哈希表中指定 key 的所有字段和值</li>
<li><code><span class="hljs-symbol">HGET</span> key <span class="hljs-meta">field</span></code> 获取存储在哈希表中指定字段的值</li>
<li><code><span class="hljs-attribute">HDEL</span> key field1<span class="hljs-meta"> [field2]</span></code> 删除一个或多个哈希表字段</li>
</ol>
<h3>List类型</h3>
<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）<br>
一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>
<ol>
<li><code><span class="hljs-attribute">LPUSH key value</span></code>  将一个值插入到已存在的列表头部</li>
<li><code><span class="hljs-attribute">LLEN key</span></code> 获取列表长度</li>
<li><code>LINDEX <span class="hljs-keyword">key</span> <span class="hljs-keyword">index</span></code> 通过索引获取列表中的元素</li>
<li><code>LRANGE key <span class="hljs-literal">start</span> <span class="hljs-literal">stop</span></code> 获取列表指定范围内的元素</li>
</ol>
<h3>Set类型</h3>
<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>
<ol>
<li><code><span class="hljs-attribute">SADD</span> key member1<span class="hljs-meta"> [member2]</span></code> 向集合添加一个或多个成员</li>
<li><code><span class="hljs-attribute">SCARD key</span></code> 获取集合的成员数</li>
<li><code><span class="hljs-attribute">SMEMBERS key</span></code> 返回集合中的所有成员</li>
<li><code><span class="hljs-attribute">SREM</span> key member1<span class="hljs-meta"> [member2]</span></code> 移除集合中一个或多个成员</li>
</ol>
<h3>Sorted set类型</h3>
<p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。<br>
不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序，有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<ol>
<li><code>ZADD key <span class="hljs-keyword">score1 </span>member1 [<span class="hljs-keyword">score2 </span>member2]</code>向有序集合添加一个或多个成员，或者更新已存在成员的分数</li>
<li><code><span class="hljs-attribute">ZCARD key</span></code>获取有序集合的成员数</li>
<li><code>ZRANGE key <span class="hljs-literal">start</span> <span class="hljs-literal">stop</span> [WITHSCORES]</code>通过索引区间返回有序集合指定区间内的成员</li>
<li><code>ZREM <span class="hljs-built_in">key</span> <span class="hljs-built_in">member</span> [<span class="hljs-built_in">member</span> ...]</code>移除有序集合中的一个或多个成员</li>
</ol>
<h2>redis java 连接</h2>
<p>pom.xml</p>
<pre><code class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
</code></pre>
<p>连接测试</p>
<pre><code class="language-java">    @Test
    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testRedis(){
        Jedis jedis = <span class="hljs-built_in">new</span> Jedis(<span class="hljs-built_in">new</span> HostAndPort("127.0.0.1", <span class="hljs-number">6379</span>));
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jedis.ping());
        jedis.<span class="hljs-keyword">set</span>("city", "长春");
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jedis.<span class="hljs-keyword">get</span>("city"));
        jedis.<span class="hljs-keyword">close</span>();
    }
</code></pre>
<p><code><span class="hljs-keyword">transient</span></code> 关键字表示该属性不会被序列化</p>
<p>User.java</p>
<pre><code class="language-java">package com.<span class="hljs-property">zr</span>.<span class="hljs-property">vo</span>;

<span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">Serializable</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> userId;
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> userName;
<span class="hljs-comment">//    transient 关键字表示该属性不会被序列化</span>
    <span class="hljs-keyword">private</span> transient <span class="hljs-title class_">String</span> password;

    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserId</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> userId;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserId</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> userId</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userId</span> = userId;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> userName;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> userName</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = userName;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) {
        <span class="hljs-keyword">return</span> password;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPassword</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> password</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;
    }
}
</code></pre>
<p>SerializableUtil.java</p>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.zr.utils;

<span class="hljs-keyword">import</span> java.io.*;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializableUtil</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serializable(Object object) <span class="hljs-keyword">throws</span> IOException {
        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();
        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bao);
        oos.writeObject(object);
        oos.flush();
        <span class="hljs-keyword">return</span> bao.toByteArray();
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unSerializable</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException {
        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);
        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bai);
        <span class="hljs-keyword">return</span> ois.readObject();
    }
}
</code></pre>
<p>AppTest.java</p>
<pre><code class="language-java">package com.zr;

<span class="hljs-keyword">import</span> static org.junit.<span class="hljs-keyword">Assert</span>.assertTrue;

<span class="hljs-keyword">import</span> com.zr.utils.SerializableUtil;
<span class="hljs-keyword">import</span> com.zr.vo.<span class="hljs-keyword">User</span>;
<span class="hljs-keyword">import</span> org.junit.Test;
<span class="hljs-keyword">import</span> redis.clients.jedis.HostAndPort;
<span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;

<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-comment">/**
 * Unit test for simple App.
 */</span>
<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> AppTest 
{
    @Test
    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testRedis() throws IOException, ClassNotFoundException {
        Jedis jedis = <span class="hljs-built_in">new</span> Jedis(<span class="hljs-built_in">new</span> HostAndPort("127.0.0.1", <span class="hljs-number">6379</span>));
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jedis.ping());
        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();
//        <span class="hljs-keyword">user</span>.setUserId("admin");
//        <span class="hljs-keyword">user</span>.setUserName("管理员");
//        <span class="hljs-keyword">user</span>.setPassword("1234");
//        jedis.<span class="hljs-keyword">set</span>("yonghu".getBytes(), SerializableUtil.<span class="hljs-keyword">serializable</span>(<span class="hljs-keyword">user</span>));
        <span class="hljs-keyword">Object</span> obj = SerializableUtil.unSerializable(jedis.<span class="hljs-keyword">get</span>("yonghu".getBytes()));
        <span class="hljs-keyword">if</span>(obj.getClass().getName().contains("User")){
            <span class="hljs-keyword">user</span> = (<span class="hljs-keyword">User</span>) obj;
        }
        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>.getUserName());
        jedis.<span class="hljs-keyword">close</span>();

    }
}
</code></pre>
<h2>redis持久化</h2>
<h3>RDB方式</h3>
<p>redis database</p>
<p>会丢失最后一次的更改</p>
<p>二进制文件保存 速度快 快照</p>
<pre><code class="language-conf"><span class="hljs-comment"># 900秒之内1次更改</span>
<span class="hljs-attribute">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span>
<span class="hljs-attribute">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span>
<span class="hljs-attribute">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span>
</code></pre>
<h3>AOF方式</h3>
<p>append only file</p>
<p>保存运行的命令，每次运行时重新执行一遍所有命令<br>
速度慢</p>
<h2>redis常见问题</h2>
<ol>
<li>缓存穿透<br>
查询多次数据库不存在的对象，会对数据库造成压力。<br>
解决方法：数据库返回空对象，存入缓存</li>
<li>缓存击穿<br>
大量请求查询同一个key，缓存过期后给数据库造成压力</li>
<li>缓存雪崩<br>
大量请求查询不同key</li>
</ol>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"10月6日后端学习笔记(数据库)"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Le","1",{"href":"/articles/后端学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"后端学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"mybatis"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"mysql"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"数据库"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"redis"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"缓存"}]]]}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$f"}}],["$","$L10",null,{}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L11",null,{}]]}]]}],["$","$L12",null,{}]]}]
