1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/4889457fae64fbaf.css",{"as":"style"}]
0:["c64XTnMxJ27tjm32UMIrS",[[["",{"children":["article",{"children":[["id","11%E6%9C%8811%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"11月11日Android学习笔记\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/4889457fae64fbaf.css","precedence":"next"}]],"$L4"]]]]
5:HL["/_next/static/css/b4d4f9fffc1492fd.css",{"as":"style"}]
6:HL["/_next/static/css/99f6a99e5e57ec87.css",{"as":"style"}]
7:I{"id":3015,"chunks":["185:static/chunks/app/layout-310f4f1110904b4e.js"],"name":"","async":false}
8:I{"id":7767,"chunks":["272:static/chunks/webpack-a9ce5054b3719092.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
9:I{"id":7920,"chunks":["272:static/chunks/webpack-a9ce5054b3719092.js","971:static/chunks/fd9d1056-2a48348db6e9e5e0.js","596:static/chunks/596-38dca328e8a8de9d.js"],"name":"default","async":false}
b:I{"id":5345,"chunks":["185:static/chunks/app/layout-310f4f1110904b4e.js"],"name":"","async":false}
3:[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L7",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L7",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_aaf875","children":[["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","article","children",["id","11%E6%9C%8811%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"id\":\"11月11日Android学习笔记\"}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b4d4f9fffc1492fd.css","precedence":"next"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next"}]]}],"segment":["id","11%E6%9C%8811%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"]},"styles":[]}],"segment":"article"},"styles":[]}],["$","$Lb",null,{}]]}]]}],null]
c:I{"id":4733,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
d:I{"id":6697,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
e:I{"id":6685,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
f:I{"id":9777,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
11:I{"id":5529,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
12:I{"id":1848,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"Waline","async":false}
13:I{"id":2953,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
14:I{"id":633,"chunks":["577:static/chunks/221e729c-4a54b4fe5604a5c1.js","231:static/chunks/9316e0b3-dfc595e0ff39c618.js","165:static/chunks/165-9f67d2f80e9188a0.js","681:static/chunks/681-e2d1e0d67cbf2503.js","945:static/chunks/945-dd57d3732d1beca5.js","241:static/chunks/app/article/[id]/page-c217b84edbde72da.js"],"name":"","async":false}
10:T8128,
    <p class="time">发布时间：<time datetime="11 November, 2022">2022-11-11 17:17:11</time></p>
    <p class="words">本文字数：2,028 字       阅读完需：约 5 分钟</p>
    <html><head></head><body><h2>Android 异步任务</h2>
<h3>InfoAsyncTask.java</h3>
<pre><code class="language-java">package com.<span class="hljs-property">xyl</span>.<span class="hljs-property">app1111</span>;

<span class="hljs-keyword">import</span> android.<span class="hljs-property">app</span>.<span class="hljs-property">ProgressDialog</span>;
<span class="hljs-keyword">import</span> android.<span class="hljs-property">content</span>.<span class="hljs-property">Context</span>;
<span class="hljs-keyword">import</span> android.<span class="hljs-property">os</span>.<span class="hljs-property">AsyncTask</span>;
<span class="hljs-keyword">import</span> android.<span class="hljs-property">text</span>.<span class="hljs-property">TextUtils</span>;
<span class="hljs-keyword">import</span> android.<span class="hljs-property">util</span>.<span class="hljs-property">Log</span>;

<span class="hljs-keyword">import</span> com.<span class="hljs-property">xyl</span>.<span class="hljs-property">app1111</span>.<span class="hljs-property">utils</span>.<span class="hljs-property">HttpUtils</span>;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoAsyncTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AsyncTask</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Void</span>, <span class="hljs-title class_">String</span>&gt; {

    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Context</span> context;
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ProgressDialog</span> dialog;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnLoadDataListener</span>{
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onSuccess</span>(<span class="hljs-title class_">String</span> json);
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onError</span>();
    }
    <span class="hljs-keyword">private</span> <span class="hljs-title class_">OnLoadDataListener</span> onLoadDataListener;
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setOnLoadDataListener</span>(<span class="hljs-params">OnLoadDataListener onLoadDataListener</span>){
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onLoadDataListener</span> = onLoadDataListener;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title class_">InfoAsyncTask</span>(<span class="hljs-title class_">Context</span> context) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;
    }

    <span class="hljs-comment">/**
     * 在子线程开启之前被调用，运行在主线程当中，通常做进度对话框的初始化工作
     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onPreExecute</span>(<span class="hljs-params"></span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onPreExecute</span>();
        dialog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProgressDialog</span>(context);
        dialog.<span class="hljs-title function_">setMessage</span>(<span class="hljs-string">"正在加载中，请稍后"</span>);
        dialog.<span class="hljs-title function_">show</span>();
    }

    <span class="hljs-comment">/**
     * 开启线程，进行耗时操作
     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">params</span>
     * <span class="hljs-doctag">@return</span>
     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">doInBackground</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>... params</span>) {
        <span class="hljs-title class_">String</span> s = <span class="hljs-title class_">HttpUtils</span>.<span class="hljs-title function_">getStringByConnection</span>(params[<span class="hljs-number">0</span>]);
        <span class="hljs-keyword">return</span> s;
    }

    <span class="hljs-comment">/**
     * 计算下载的进度，在此处更新进度条
     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">values</span>
     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onProgressUpdate</span>(<span class="hljs-params">Void... values</span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onProgressUpdate</span>(values);
    }

    <span class="hljs-comment">/**
     * 运行在主线程当中，将耗时操作的结果以参数的形式显示在参数当中,result为doInBackground的返回值
     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">result</span>
     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onPostExecute</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> result</span>) {
        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">onPostExecute</span>(result);
        dialog.<span class="hljs-title function_">dismiss</span>();
        <span class="hljs-keyword">if</span> (onLoadDataListener!=<span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">TextUtils</span>.<span class="hljs-title function_">isEmpty</span>(result)) {
                onLoadDataListener.<span class="hljs-title function_">onSuccess</span>(result);
            }
            <span class="hljs-keyword">else</span>{
                onLoadDataListener.<span class="hljs-title function_">onError</span>();
            }
        }
    }
}

</code></pre>
<h3>异步请求底层模拟</h3>
<pre><code class="language-java"><span class="hljs-keyword">package</span> com.animee.app1111.utils;


<span class="hljs-keyword">import</span> android.os.Handler;
<span class="hljs-keyword">import</span> android.os.Message;

<span class="hljs-keyword">import</span> androidx.annotation.NonNull;

<span class="hljs-comment">/**
 * 作者：animee on 2022/11/11 09:51
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimeeTask</span>&lt;T,M&gt; {

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPreExecute</span><span class="hljs-params">()</span>{

    }
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> M <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(T...params)</span>;
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(M result)</span>{

    }

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnimeeTask</span><span class="hljs-params">()</span>{
        onPreExecute();
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(T...value)</span>{
        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
                <span class="hljs-type">M</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> doInBackground(value);
                <span class="hljs-comment">//Message对象获取方法有三个</span>
                <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> Message.obtain();
                msg.what = <span class="hljs-number">1</span>;
                msg.obj = m;
                handler.sendMessage(msg);

            }
        });
        thread.start();
    }
    <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>.Callback() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Message msg)</span> {
            <span class="hljs-keyword">if</span> (msg.what==<span class="hljs-number">1</span>) {
                <span class="hljs-type">M</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (M) msg.obj;
                onPostExecute(m);
            }
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
    });
}

</code></pre>
<h3>知识点</h3>
<pre><code class="language-text"><span class="hljs-number">1</span><span class="hljs-selector-class">.android</span>处理网络请求等耗时操作的方法，有两种：
  <span class="hljs-number">1</span>.异步任务   AsyncTask
  <span class="hljs-number">2</span>.多线程和线程池    Handler

<span class="hljs-number">2</span>.为什么要使用异步任务？
      <span class="hljs-number">1</span><span class="hljs-selector-class">.Android</span>是一个单线程模型，同时也是一个多线程操作系统。
    <span class="hljs-number">2</span>.把耗时操作(读取文件，加载网络请求)放到子线程当中执行。
原因：android只能在主线程当中更新ui，即UI线程，不能在其他线程当中做更新ui的操作。
这样保证了程序的稳定性和准确性。
稳定性：避免了多线程同时操作ui，造成了线程混乱。
准备性：把耗时操作都放到子线程当中执行，就会避免了<span class="hljs-built_in">ANR</span>(Android Not Responding)应用程序无响应异常。

<span class="hljs-number">3</span><span class="hljs-selector-class">.AsyncTask</span>为何而生？
       <span class="hljs-number">1</span>.可以封装，简化异步操作
       <span class="hljs-number">2</span>.获取网络数据，传递给主线程更新UI。

<span class="hljs-number">4</span>.构建AsyncTask子类的参数、
AsyncTask&lt;params,progress,result&gt;是一个抽象类。
通常用于被继承，继承这个asyncTask就需要指定三个泛型参数。
    Params:启动任务时输入参数的类型
    Progress：后台任务执行中返回进度值的类型
    Result: 后台任务执行完返回结果的类型。

<span class="hljs-number">5</span>.继承AsyncTask当中需要重写的四个方法。

<span class="hljs-built_in">onPreExecute</span>():后台操作前被调用，主要用于一些UI组件的初始化。（不做耗时操作）
<span class="hljs-built_in">doInBackground</span>(Params...)：必须重写，异步任务要执行的操作必须在这个方法中执行。(执行耗时操作)
<span class="hljs-built_in">onPostExecute</span>(Result):在doInBackground方法执行完成后，自动调用此方法，同时doInBackground方法返回的数据
            会作为此方法的参数。一般在此方法中去执行更新ui的操作。
<span class="hljs-built_in">onProgressUpdate</span>(Progress...)：更新了任务执行就进度后，会触发的方法。在doInBackground方法当中调用
                <span class="hljs-built_in">publishProgress</span>(Progress...)方法，此方法才会被系统调用。


<span class="hljs-number">6</span>.AsyncTask的具体实现过程。
      <span class="hljs-number">1</span>.写一个类，继承asyncTask，同时传入指定的三个泛型
    <span class="hljs-number">2</span>.重写必要的两个方法。
            <span class="hljs-built_in">doInBackground</span>();
        <span class="hljs-built_in">onPostExecute</span>();
    <span class="hljs-number">3</span>.重写可选的两个方法。
            <span class="hljs-built_in">onPreExecute</span>();
        <span class="hljs-built_in">onProgressUpdate</span>();
    <span class="hljs-number">4</span>.在ui线程当中实例化，自定义的子类的对象。
    <span class="hljs-number">5</span>.在ui线程当中，把asynctask的对象去执行execute的方法,就是执行了异步任务。


<span class="hljs-number">7</span><span class="hljs-selector-class">.ScrollView</span>  :  滚动组件
  父类是：Framelayout
   内部只能包含一个子类控件，通常这个控件是LinearLayout，可以在线性布局当中去放置其他控件。

<span class="hljs-number">8</span>、android的view有一个表示显示状态的属性visibility。
  对应的值有三个：
   visible:设置控件可见
   invisible:设置控件不可见
   gone:设置控件隐藏
   invisible和gone的主要区别：当设置为invisible时，界面保留view控件所占据的空间。
   当设定为gone时，view隐藏并且不保留view控件所占据的空间。

<span class="hljs-number">9</span>.AsyncTask的不足之处。
     <span class="hljs-number">1</span>.AsyncTask如果在同一个界面当中加载很多接口，会开启大量的线程，会导致系统资源严重被占用，
      然后就会产生应用程序FC错误。（FC:应用程序强制关闭，崩溃）
   <span class="hljs-number">2</span>.AsyncTask执行doinBackground方法时，即使调用了取消方法，也不能取消，要等到doinBackground
   方法中的代码执行结束后才能取消。
   <span class="hljs-number">3</span>.线程池是不能维护的，当产生大量异步操作的时候线程池就满了，然后就会产生异常。

<span class="hljs-number">10</span>.异步和同步
     同步：在同一个线程当中执行一系列的操作。
   异步：多个线程当中完成工作，最后通过多线程通信达到最终效果。

<span class="hljs-number">11</span>.AsyncTask的取消。
     <span class="hljs-number">1</span>.要在UI线程当中执行AsyncTask的cancel方法。
   <span class="hljs-number">2</span>.要在doInBackground方法当中做一个判断，判断条件是是否被取消<span class="hljs-built_in">isCancelled</span>(),如果未被取消才执行逻辑代码。
   <span class="hljs-number">3</span>.<span class="hljs-built_in">cancel</span>(true)   ：只要是执行了这个方法，AsyncTask立即被取消。
     <span class="hljs-built_in">cancel</span>(false)  : 执行了这个方法，要等本次while中的内容执行完才被取消。

<span class="hljs-number">12</span>.AsyncTask的注意事项：
      <span class="hljs-number">1</span>.必须在UI线程当中创建AsyncTask的实例。
    <span class="hljs-number">2</span>.必须在ui线程当中执行AsyncTask的execute的方法。
    <span class="hljs-number">3</span>.重写的四个方法是系统自动调用的，我们不能手动的调用。
    <span class="hljs-number">4</span>.每个asyncTask的实例只能被执行一次，多次执行就会出现异常。
</code></pre>
<h2>滚动分页加载</h2>
<pre><code class="language-java">   <span class="hljs-comment">//ListView 滚动监听接口</span>
    AbsListView.<span class="hljs-type">OnScrollListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbsListView</span>.OnScrollListener() {
        <span class="hljs-comment">// 当滚动状态发生改变时，回调的方法</span>
<span class="hljs-comment">//        SCROLL_STATE_IDLE 停止状态  SCROLL_STATE_TOUCH_SCROLL 手指触摸滚动</span>
<span class="hljs-comment">//        SCROLL_STATE_FLING 惯性滚动</span>
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onScrollStateChanged</span><span class="hljs-params">(AbsListView view, <span class="hljs-type">int</span> scrollState)</span> {
            <span class="hljs-keyword">if</span> (scrollState == SCROLL_STATE_IDLE
                    &amp;&amp; lastVisibleItem==adapter.getCount()) {
                <span class="hljs-comment">//显示尾布局，并且开始加载</span>
                footerView.setVisibility(View.VISIBLE);
                page++;
                <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> creatURL();
                loadDatas(url);
            }
        }
        <span class="hljs-comment">//    firstVisibleItem：当前可见第一条的位置   visibleItemCount 可见条目数量   totalItemCount 一共有多少条</span>
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onScroll</span><span class="hljs-params">(AbsListView view, <span class="hljs-type">int</span> firstVisibleItem, <span class="hljs-type">int</span> visibleItemCount, <span class="hljs-type">int</span> totalItemCount)</span> {
            lastVisibleItem = firstVisibleItem+visibleItemCount-<span class="hljs-number">1</span>;
        }
    };
</code></pre>
<h2>下拉刷新</h2>
<h3>build.gradle</h3>
<pre><code class="language-java">    <span class="hljs-keyword">implementation</span> <span class="hljs-string">"androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"</span>
</code></pre>
<h3>使用</h3>
<pre><code class="language-java">    binding.srLayout.setColorSchemeColors(Color.RED);
    binding.srLayout.setOnRefreshListener(onRefreshListener);
    <span class="hljs-comment">//    下拉刷新的监听接口</span>
    SwipeRefreshLayout.<span class="hljs-type">OnRefreshListener</span> <span class="hljs-variable">onRefreshListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SwipeRefreshLayout</span>.OnRefreshListener() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRefresh</span><span class="hljs-params">()</span> {
            page=<span class="hljs-number">1</span>;
            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> creatURL();
            mDatas.clear();
            loadDatas(url);
        }
    };
</code></pre>
<h2>通知(Notification)</h2>
<h3>发送简单通知</h3>
<pre><code class="language-java">    <span class="hljs-comment">/**
     * 发送简单通知
     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendNormalNotify</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">//创建通知的装饰对象</span>
        Notification.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(<span class="hljs-built_in">this</span>);
        <span class="hljs-comment">//设置通知显示内容</span>
        builder.setContentTitle(<span class="hljs-string">"好消息, 好消息！！！！"</span>);
        builder.setContentText(<span class="hljs-string">"新冠疫情神奇消失了。。。"</span>);
        builder.setSmallIcon(R.mipmap.ib_luck_normal);
        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getResources(), R.mipmap.jinniu);
        builder.setLargeIcon(bitmap);
        builder.setAutoCancel(<span class="hljs-literal">true</span>);
        builder.setOngoing(<span class="hljs-literal">false</span>);<span class="hljs-comment">//侧滑能不能取消通知</span>
        builder.setPriority(Notification.PRIORITY_HIGH);
        builder.setTicker(<span class="hljs-string">"放心Go向你发来了双11问候，快来看我....."</span>);
        <span class="hljs-comment">//设置点击预先跳转意图</span>
        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, NewsInfoActivity.class);
        builder.setContentIntent(PendingIntent.getActivity(<span class="hljs-built_in">this</span>, <span class="hljs-number">100</span>, intent, PendingIntent.FLAG_ONE_SHOT));
        <span class="hljs-comment">//获取通知对象</span>
        <span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> builder.build();
        <span class="hljs-comment">//发送通知</span>
        manager.notify(<span class="hljs-number">1</span>, notification);
    }
</code></pre>
<h3>完整实例</h3>
<p>注意: Andorid</p>
<pre><code class="language-java"><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;

<span class="hljs-keyword">import</span> android.app.Notification;
<span class="hljs-keyword">import</span> android.app.NotificationChannel;
<span class="hljs-keyword">import</span> android.app.NotificationManager;
<span class="hljs-keyword">import</span> android.app.PendingIntent;
<span class="hljs-keyword">import</span> android.content.Context;
<span class="hljs-keyword">import</span> android.content.Intent;
<span class="hljs-keyword">import</span> android.graphics.Bitmap;
<span class="hljs-keyword">import</span> android.graphics.BitmapFactory;
<span class="hljs-keyword">import</span> android.os.Build;
<span class="hljs-keyword">import</span> android.os.Bundle;
<span class="hljs-keyword">import</span> android.view.View;

<span class="hljs-comment">/**
 * Notification  通知信息
 * 在应用中如果需要提示用户一些信息，显示在通知栏，可以发送Notification
 *
 * */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotifyActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> {

    NotificationManager manager;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> {
        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);
        setContentView(R.layout.activity_notify);
        manager =
                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        createChannel();

    }
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHANNEL_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">"com.animee.app1111"</span>;
    <span class="hljs-comment">//渠道名</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHANNEL_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">"渠道名-简单通知"</span>;
    <span class="hljs-comment">//渠道重要级</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CHANNEL_IMPORTANCE</span> <span class="hljs-operator">=</span> NotificationManager.IMPORTANCE_DEFAULT;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createChannel</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">//创建通知渠道，Android8.0及以上需要</span>
        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.O) {
            <span class="hljs-keyword">return</span>;
        }
        <span class="hljs-type">NotificationChannel</span> <span class="hljs-variable">notificationChannel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationChannel</span>(
                CHANNEL_ID, CHANNEL_NAME, CHANNEL_IMPORTANCE);
        manager.createNotificationChannel(notificationChannel);
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> {

        <span class="hljs-keyword">switch</span> (view.getId()) {
            <span class="hljs-keyword">case</span> R.id.notify_btn1:
                sendNormalNotify();
                <span class="hljs-keyword">break</span>;
        }
    }
    <span class="hljs-comment">/** 发送简单通知*/</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendNormalNotify</span><span class="hljs-params">()</span> {
<span class="hljs-comment">//        创建通知的装饰对象</span>
        Notification.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) {
            builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(<span class="hljs-built_in">this</span>, CHANNEL_ID);
        }
        <span class="hljs-keyword">else</span>{
            builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(<span class="hljs-built_in">this</span>);
        }
<span class="hljs-comment">//        设置通知显示内容</span>
        builder.setContentTitle(<span class="hljs-string">"好消息，好消息！！！"</span>);
        builder.setContentText(<span class="hljs-string">"新冠疫情神奇消失了......."</span>);
        builder.setSmallIcon(R.mipmap.ic_launcher);

        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getResources(), R.mipmap.jinniu);
        builder.setLargeIcon(bitmap);

        builder.setAutoCancel(<span class="hljs-literal">true</span>);
        builder.setOngoing(<span class="hljs-literal">false</span>);    <span class="hljs-comment">//侧滑能不能取消通知</span>
        builder.setPriority(Notification.PRIORITY_HIGH);
        builder.setTicker(<span class="hljs-string">"放心Go向你发来了双11问候，快来看我......"</span>);
<span class="hljs-comment">//        设置点击预先跳转意图</span>
        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, NewsInfoActivity.class);

        builder.setContentIntent(PendingIntent
                .getActivity(<span class="hljs-built_in">this</span>,<span class="hljs-number">100</span>,intent,PendingIntent.FLAG_IMMUTABLE));
<span class="hljs-comment">//      获取通知对象</span>
        <span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> builder.build();

<span class="hljs-comment">//        发送通知</span>
        manager.notify(<span class="hljs-number">1</span>,notification);
    }



}
</code></pre>
<h3>发送大图通知</h3>
<pre><code class="language-java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendBigImgNotify</span><span class="hljs-params">()</span> {
        NotificationCompat.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span>
                <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>);
        NotificationCompat.<span class="hljs-type">BigPictureStyle</span> <span class="hljs-variable">style</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.BigPictureStyle();
        <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bm1</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getResources(), R.mipmap.jinniu);
        style.bigLargeIcon(bm1);
        style.setBigContentTitle(<span class="hljs-string">"美图来袭....."</span>);
        style.setSummaryText(<span class="hljs-string">"每日壁纸更新更多内容，点击查看"</span>);
        builder.setStyle(style);
        builder.setShowWhen(<span class="hljs-literal">true</span>);
        <span class="hljs-comment">//必须设置小图标</span>
        builder.setSmallIcon(R.mipmap.ib_luck_normal);
        <span class="hljs-keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) {
            builder.setChannelId(CHANNEL_ID);
        }
        <span class="hljs-type">Notification</span> <span class="hljs-variable">nf</span> <span class="hljs-operator">=</span> builder.build();
        manager.notify(<span class="hljs-number">2</span>, nf);
    }
</code></pre>
<h3>发送多条消息通知</h3>
<pre><code class="language-java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendListNotify</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">//        创建通知的装饰对象</span>
        Notification.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) {
            builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(<span class="hljs-built_in">this</span>, CHANNEL_ID);
        }
        <span class="hljs-keyword">else</span>{
            builder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(<span class="hljs-built_in">this</span>);
        }
        builder.setSmallIcon(R.mipmap.ic_launcher);
        builder.setContentTitle(<span class="hljs-string">"今日卫健委发出通告"</span>);
        Notification.<span class="hljs-type">InboxStyle</span> <span class="hljs-variable">style</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.InboxStyle();
        style.addLine(<span class="hljs-string">"取消健康码"</span>);
        style.addLine(<span class="hljs-string">"取消隔离"</span>);
        style.addLine(<span class="hljs-string">"取消核酸检测"</span>);
        builder.setStyle(style);
        <span class="hljs-type">Notification</span> <span class="hljs-variable">notify</span> <span class="hljs-operator">=</span> builder.build();
        manager.notify(<span class="hljs-number">3</span>, notify);
    }
</code></pre>
</body></html>
  a:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$Lc",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$Ld",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"11月11日Android学习笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Le","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Le","1",{"href":"/articles/Android学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"Android学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"Android"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"Thread"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"AsyncTask"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"Notification"}]]]}],["$","$Lf",null,{"path":"11%E6%9C%8811%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}],["$","$L11",null,{}],["$","$L12",null,{"path":"11%E6%9C%8811%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L13",null,{}]]}]]}],["$","$L14",null,{}]]}]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"11月11日Android学习笔记 - 流年石刻"}],["$","meta","2",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","3",{"name":"next-size-adjust"}]]
