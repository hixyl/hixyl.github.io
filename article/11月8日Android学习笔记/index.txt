3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-950680b5068c0831.js"],""]
7:I[4266,["185","static/chunks/app/layout-950680b5068c0831.js"],"default"]
4:["id","11%E6%9C%888%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"]
0:["bbFeRMIduFcZud7BNs8NQ",[[["",{"children":["article",{"children":[["id","11%E6%9C%888%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__?{\"id\":\"11月8日Android学习笔记\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["article",{"children":[["id","11%E6%9C%888%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99f6a99e5e57ec87.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/d0df4e9d9cd28850.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/c033a265c4b6e7f8.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","3",{"rel":"stylesheet","href":"/_next/static/css/81abeb1d965206f7.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","4",{"rel":"stylesheet","href":"/_next/static/css/a46a6036119d7d12.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","5",{"rel":"stylesheet","href":"/_next/static/css/51cbc18a5b192d8f.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","article","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"zh","children":[["$","link",null,{"rel":"icon","href":"/favicon.png?<generated>","type":"image/<generated>","sizes":"<generated>"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-N3DJ3JTVT2"}],["$","$L6",null,{"id":"google-analytics","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n        \n          gtag('config', 'G-N3DJ3JTVT2');\n        "}],["$","body",null,{"className":"__className_36bd41","children":[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","$L7",null,{}]]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/aae87c042353adfd.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L8"]]]]]
9:I[2612,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
a:I[4306,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
b:I[231,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],""]
c:I[4254,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
e:I[3869,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
f:I[5339,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"Waline"]
10:I[8360,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
11:I[4226,["577","static/chunks/221e729c-e5a67d23aac7644c.js","231","static/chunks/9316e0b3-81def07e0919db1c.js","974","static/chunks/974-9ffea8f9ea4bfaa2.js","536","static/chunks/536-12c341f043d96047.js","665","static/chunks/665-f7c57b2084cbed6b.js","241","static/chunks/app/article/%5Bid%5D/page-28a3798f9eb189fc.js"],"default"]
d:T3477,
    <p class="time">发布时间：<time datetime="08 November, 2022">2022-11-08 18:46:22</time></p>
    <p class="words">本文字数：1,905 字       阅读完需：约 4 分钟</p>
    <h2>框架的导入</h2>
<p>在当前项目的<code>build.gradle</code>的<code>dependencies</code>中加入框架即可，如下例所示</p>
<p>build.gradle</p>
<pre><code class="language-java">dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.squareup.picasso:picasso:2.5.2' //导入的框架
}
</code></pre>
<h2>加载网络图片</h2>
<ol>
<li>
<p>导入<code>picasso</code>框架
<code>implementation 'com.squareup.picasso:picasso:2.5.2'</code></p>
</li>
<li>
<p>设置网络权限<br>
在<code>AndroidManifest.xml</code>中添加<code>&#x3C;uses-permission android:name="android.permission.INTERNET"/></code>，申请网络权限
如下例：</p>
<pre><code class="language-xml"> &#x3C;manifest xmlns:android="http://schemas.android.com/apk/res/android"
 xmlns:tools="http://schemas.android.com/tools">
 &#x3C;uses-permission android:name="android.permission.INTERNET"/>
 .........
</code></pre>
</li>
<li>
<p>加载图片</p>
</li>
</ol>
<pre><code class="language-java">        Picasso.with(context).load(bean.getPic()).into(holder.iv);
</code></pre>
<h2>tips</h2>
<p>listview当中包含button类型，需要在item布局外层添加这个属性，避免被抢占焦点</p>
<p><code>android:descendantFocusability="blocksDescendants"</code></p>
<p>如下例</p>
<p>item_detailgv.xml</p>
<pre><code class="language-xml">&#x3C;?xml version="1.0" encoding="utf-8"?>
&#x3C;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:descendantFocusability="blocksDescendants"
    android:padding="10dp">
</code></pre>
<h2>启动模式</h2>
<p>支持四种属性值：</p>
<ol>
<li>standard   ：标准模式，默认的启动模式。</li>
<li>singleTop  ： 栈顶单例模式</li>
<li>singleTask ： 栈内单例模式</li>
<li>singleInstance：全局单例模式</li>
</ol>
<p>为什么activity会有加载模式呢？加载模式有什么用呢？<br>
activity的加载模式，就是负责管理实例化，加载activity的方式，并可以控制activity和task之间的加载关系。</p>
<h3>【standard模式】</h3>
<p>标准启动模式，当启动目标activity的时候都会创建一个新的实例，并且将当前的activity放在栈顶。
这个模式不会启动新的task。新的activity会被添加到原来的task当中。</p>
<h3>【singleTop模式】</h3>
<p>在栈顶就重用，否则就用新的。<br>
当需要启动的目标activity已经位于栈顶的时候，系统就不会创建新的目标activity的实例，而是直接复用已有的
activity的实例。<br>
原理：主要是因为他调用了activity类的<code>onNewIntent()</code>方法,可以在该方法当中刷新页面数据。</p>
<p>举例：短信编辑页面</p>
<h3>【singleTask模式】</h3>
<p>采用这个模式的activity在task栈内只有一个实例，当系统使用这个模式启动目标activity时，可以分为三种情况。<br>
(1).如果将要启动的目标activity不存在，系统将会创建目标activity的实例，并且将他放到task栈顶。<br>
(2).如果将要启动的目标activity已经位于task栈顶，此时就和singleTop的模式的行为是相同的。<br>
(3).如果将要启动的目标activity已经存在，但是没有位于task栈顶，系统将会把位于该activity上面的所有<br>
activity都移出task栈，从而是的目标activity就转入栈顶。</p>
<p>singleTop和singleTask的区别：<br>
singleTop模式每次只检测当前栈顶的activity是否是希望我们创建的，如果是就不用创建了，复用就可以了。<br>
singleTask模式会检测栈中所有的activity的对象，找到就提到栈顶，将前面挡住的全部销毁</p>
<p>举例：手机浏览器</p>
<h3>【singleInstance模式】</h3>
<p>在这中加载模式下，系统保证无论从哪个task中启动目标activity，只会创建一个目标activity的实例，并且会使用<br>
一个全新的task的栈来装载这个task的实例。<br>
使用这种模式启动目标activity，也可以分为两种情况：<br>
（1）如果将要启动的目标activity不存在，系统会先创建一个全新的task，加载创建目标activity的实例，并且会有一个<br>
全新的task的栈来装载这个目标activity。<br>
（2）如果将要启动的目标activity已经存在，无论它位于哪个应用程序中，无论他位于哪个task中，系统将会把这个<br>
activity所在的task放置在前台，从而使这个activity显示出来。<br>
<strong>注意:</strong><br>
采用singleInstance的模式加载的activity使用位于栈顶，并且在栈中只有这个activity。<br>
举例: 来电显示页面，有道取词页面</p>
<h2>intent</h2>
<p>可以通过setAction进行页面跳转</p>
<p>Intent的概念和作用：</p>
<ol>
<li>用于封装程序的调用“意图”</li>
<li>实现了两个activity之间的数据交互</li>
<li>各种应用程序组件（activity，service，broadcastReceiver）之间通信的重要媒介。</li>
</ol>
<h3>Intent的七大属性</h3>
<ol>
<li>ComponentName    :主要用于访问activity，进行显示意图的访问。</li>
<li>action    ：表示想要启动的activity想要完成什么动作。进行隐士意图的访问。</li>
<li>category  ：为action增加附加类别的信息。它是action大动作中的小动作。</li>
<li>data      ：保存需要传递的数据的Uri格式。  Uri：统一资源标识符</li>
<li>type	    ：区分文件类型</li>
<li>extras    ：保存需要传递的额外数据。</li>
<li>flags     ：动态的配置activity的启动模式。</li>
</ol>
<h3>【ComponentName】：用于指定启动的组件</h3>
<p>核心代码：</p>
<pre><code class="language-java">//完整的显示意图的跳转方法：
Intent intent3 = new Intent();
ComponentName cName = new ComponentName(MainActivity.this, SecondActivity.class);
intent3.setComponent(cName);
startActivity(intent3);
</code></pre>
<h3>【action】：某个activity能够完成什么“动作”</h3>
<p>intent当中定义的关于action的实参。<br>
ACTION_MAIN:（android.intent.action.MAIN）   Android的程序的入口<br>
ACTION_VIEW:(android.intent.action.VIEW)     显示指定的数据<br>
ACTION_EDIT:(android.intent.action.EDIT)     编辑指定的数据<br>
ACTION_DIAL:(android.intent.action.DIAL)     显示拨号面板界面<br>
ACTION_CALL:(android.intent.action.CALL)     直接呼叫data中所带的号码<br>
ACTION_ANSWER:(android.intent.action.ANSWER)  接听来电<br>
ACTION_SEND:(android.intent.action.SEND)      向其他人发送数据（彩信，email）<br>
ACTION_SENDTO:(android.intent.action.SENDTO)  向其他人发送短信<br>
ACTION_SEARCH:(android.intent.action.SEARCH)  执行搜索<br>
ACTION_GET_CONTENT:(android.intent.action.GET_CONTENT)  让用户选择数据，并且返回所选数据</p>
<h3>【Category】：类别属性</h3>
<p>指明了执行action的分类，是action的子动作。</p>
<p>category常用的属性值：<br>
CATEGORY_DEFAULT(android.intent.category.DEFAULT):Android系统中默认的执行方式，
按照普通的activity的执行方式来执行。<br>
CATEGORY_HOME(android.intent.category.HOME):回到主屏页面<br>
CATEGORY_LAUNCHER(android.intent.category.LAUNCHER):设置该组件为当前应用程序中优先级最高的activity，
通常是与ACTION_MAIN配合使用的。<br>
CATEGORY_PREFERENCE:设置该组件为preference。<br>
CATEGORY_BROWSABLE:设置该组件可以使用浏览器启动。</p>
<p>action和category在清单文件当中注册时，都是添加在activity的子元素<code>&#x3C;intent-fileter></code>当中的。<br>
这个元素中可以包含多个action属性和多个category属性。</p>
<p>在应用程序中创建一个intent的属性时，只能设置一个action的属性，因为他使用的是setAction(str)的方法。<br>
但是可以包含多个category的属性，因为他是使用addCategory(str)的方法的。</p>
<p><strong>注意</strong>set和add的区别理解</p>
<h3>【Data】：通常用于向action属性提供数据。</h3>
<p>Data属性的值是一个uri的对象，URI的格式：  scheme://host:port/path<br>
scheme:    协议<br>
host：     主机号<br>
port：     端口号<br>
path：     路径</p>
<p>系统内置的data属性的常量：</p>
<ol>
<li>tel：         号码的数据格式，后面跟着电话号码</li>
<li>mailto：      邮件的数据格式，后面跟着邮件收件人的地址</li>
<li>smsto：       短信的数据格式，后面跟着短信接受的号码</li>
<li>content://    内容数据格式，后面跟着需要读取的内容（结合内容提供者）</li>
<li>file:///      文件数据格式，后面跟着文件的路径，要有三个斜线。</li>
<li>geo://lat,lon  经纬度数据格式，在地图上显示该经纬度指定的地址。</li>
</ol>
<pre><code class="language-java">public void home(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);
        startActivity(intent);
    }
    
public void dial(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_DIAL);   //Intent.ACTION_DIAL
        Uri uri = Uri.parse("tel:18511698819");
        intent.setData(uri);
        startActivity(intent);
    }
    
public  void browser(View v) {
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri data = Uri.parse("http://www.baidu.com/");
        intent.setData(data);
        startActivity(intent);
    }
public void map(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri data = Uri.parse("geo://34.009,152.890");
        intent.setData(data);
        startActivity(intent);
    }
public void video(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri uri = Uri.parse("file:///sdcard/and.mp4");
        intent.setDataAndType(uri, "video/*");
        startActivity(intent);
    }
public void music(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri uri = Uri.parse("file:///sdcard/fly.mp3");
        intent.setDataAndType(uri, "audio/*");
        startActivity(intent);
    }
public void sms(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_SENDTO);
        Uri uri = Uri.parse("smsto:18511690019");
        intent.setData(uri);
        intent.putExtra("sms_body", "今天的天气好晴朗！！");
        startActivity(intent);
    } 
public void sendEmail(View v){
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_SEND);
        String bcc[] = {"liusihui@1000phone.com"};
        String cc[] = {"android@163.com","zhangsan@126.com"};
        intent.putExtra(Intent.EXTRA_BCC, bcc);
        intent.putExtra(Intent.EXTRA_CC, cc);
        intent.putExtra(Intent.EXTRA_SUBJECT, "今天的天气好晴朗");
        intent.putExtra(Intent.EXTRA_TEXT, "一起出去玩吧~~");
        intent.setType("message/*");
        startActivity(intent);
    }
</code></pre>
<h2>读取Assets</h2>
<ol>
<li>通过<code>context.getAssets()</code>获取<code>AssetManager</code>对象</li>
<li>通过<code>assetManager.open(fileName)</code>获取输入流</li>
<li>使用<code>ByteArrayOutputStream</code>接收输入流并转成字节数组或者字符串</li>
</ol>
<h3>示例</h3>
<pre><code class="language-java">   /**
     * 传入文件的路径 xzcontent/xzcontent.json
     * @param fname
     * @return
     */
    public String getAssetJson(String fname){
        //获取Asset文件管理者
        AssetManager assetManager = context.getAssets();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        //打开文件
        try {
            InputStream is = assetManager.open(fname);
            //读流的数据
            int hasRead = 0;
            byte[] buf = new byte[1024];
            while ((hasRead = is.read(buf))!=-1){
                baos.write(buf, 0, hasRead);
            }
            baos.flush();
            is.close();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return baos.toString();
    }
</code></pre>
<h3>读取assets中的图片</h3>
<p>使用BitmapFactory将byte数组转换为Bitmap对象，然后setImageBitmap即可<br>
如下例</p>
<pre><code class="language-java"> // 读取asset文件夹当中的图片，显示在imageview上
    String fname = "xzlog/" + dao.getLogoname() + ".png";
    byte[] bytes = assetsUtils.getAssetByteArray(fname);
    //将字节数组转换成位图对象
    Bitmap bitmap =
            BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
    vholder.iv.setImageBitmap(bitmap);
</code></pre>

  2:["$","div",null,{"className":"article_pageBody__Bryg4","children":[["$","$L9",null,{"menuItemList":[{"id":0,"label":"首页","href":"/","icon":"/icons/home_gray.svg","iconSelected":"/icons/home_black.svg"},{"id":1,"label":"文章","href":"/articles/all/1","icon":"/icons/article_gray.svg","iconSelected":"/icons/article_black.svg"},{"id":3,"label":"关于","href":"/about","icon":"/icons/about_gray.svg","iconSelected":"/icons/about_black.svg"},{"id":4,"label":"搜索","href":"/search","icon":"/icons/search_gray.svg","iconSelected":"/icons/search_black.svg"}],"currentSelectedLabel":"文章"}],["$","div",null,{"className":"article_pageBodyMain___x_AF","children":[["$","$La",null,{}],["$","div",null,{"className":"article_articleContainer__uRwUh scrollContent","children":[["$","div",null,{"className":"article_articleBody__0coIY scrollContent","children":[["$","h1",null,{"style":{"marginBottom":"0.1rem","marginTop":"0.2rem"},"children":"11月8日Android学习笔记"}],["$","div",null,{"children":[["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"分类"}],[["$","$Lb","0",{"href":"/articles/新知笔记/1","children":["$","p","0",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"新知笔记"}]}],["$","$Lb","1",{"href":"/articles/Android学习/1","children":["$","p","1",{"className":"tags_tag__HZYxk tags_tagLink__gnw9V","children":"Android学习"}]}]],false]}],["$","div",null,{"className":"tags_tags__qM_Ja","children":[["$","p",null,{"className":"tags_label__Rg6b2","children":"标签"}],"$undefined",[["$","p","0",{"className":"tags_tag__HZYxk ","children":"Android"}],["$","p","1",{"className":"tags_tag__HZYxk ","children":"Activity"}],["$","p","2",{"className":"tags_tag__HZYxk ","children":"图片"}],["$","p","3",{"className":"tags_tag__HZYxk ","children":"启动模式"}],["$","p","4",{"className":"tags_tag__HZYxk ","children":"intent"}],["$","p","5",{"className":"tags_tag__HZYxk ","children":"Bitmap"}]]]}],["$","$Lc",null,{"path":"11%E6%9C%888%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/"}]]}],["$","article",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}],["$","$Lf",null,{"path":"11%E6%9C%888%E6%97%A5Android%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0","serverURL":"https://remark.timeshike.com/","lang":"zh-CN"}],["$","div",null,{"className":"bottomBar_bottomBar__uHU1W","children":["$","div",null,{"className":"bottomBar_text__iz3cM","children":["Powerd by",["$","a",null,{"href":"https://github.com/hixyl/YlBlog","target":"_blank","children":" YlBlog(玉龙博客)"}]]}]}]]}],["$","$L10",null,{}]]}]]}],["$","$L11",null,{}]]}]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"11月8日Android学习笔记 - 流年石刻"}],["$","meta","3",{"name":"next-size-adjust"}]]
1:null
